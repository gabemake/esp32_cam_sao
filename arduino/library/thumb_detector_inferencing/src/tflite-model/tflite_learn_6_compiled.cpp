/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.11.2024 19:13:35

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 24136, -38200, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00023732060799375176, 0.00013755618419963866, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ -13,-7,-39,55,94,47,-45,88,99,-25,25,-87,-50,44,1,17,127,-27,-13,-69,92,76,73,-82,-17,-65,-1,33,11,-36,84,71, 
  /* [1][0][][] */ 58,75,77,-55,-110,74,6,6,-35,-5,26,112,119,38,37,9,-38,15,-60,-84,-73,26,11,117,71,61,-37,13,93,-102,-127,-17, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0056243953295052052, 0.0032600217964500189, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -659, -480, -617, -1295, 633, -429, -1553, 574, -684, -1150, -476, -958, -852, -345, -188, -1439, 248, -1781, -997, -1403, -1209, -475, -803, -806, -582, -538, -1407, -1660, -1786, -1293, 1957, -1524, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.6845078031765297e-05, 5.5565658840350807e-05, 5.099633926874958e-05, 4.4008145778207108e-05, 7.1636561187915504e-05, 4.3410454964032397e-05, 4.3482810724526644e-05, 4.0248381992569193e-05, 4.6827804908389226e-05, 4.3801948777399957e-05, 4.4170457840664312e-05, 4.5647691877093166e-05, 3.9444526919396594e-05, 4.6792687498964369e-05, 4.4871954742120579e-05, 4.4538181100506335e-05, 5.72270764678251e-05, 5.0983180699404329e-05, 5.2000596042489633e-05, 4.2893960198853165e-05, 4.3169398850295693e-05, 4.2323023080825806e-05, 4.9270762247033417e-05, 4.6569468395318836e-05, 5.4822863603476435e-05, 4.2019630200229585e-05, 4.3534819269552827e-05, 4.6079752792138606e-05, 4.579388041747734e-05, 4.0793562220642343e-05, 6.0999947891104966e-05, 6.1675724282395095e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -26,-66,78,9,62,-14,-97,-85,26,-68,-120,26,44,3,-20,30,-32,-67,-50,-42,-55,-61,-17,81,-108,6,67,-58,92,-15,-23,-65,59,-59,-64,46,-106,-59,-85,67,49,-83,-81,43,30,-119,111,-24,-50,-46,-38,14,-73,-76,-89,95,-12,52,107,-125,-68,49,-44,31,-7,-17,62,64,47,100,60,-100,73,-78,23,32,-127,0,-55,19,35,14,72,-35,-50,-47,-91,63,12,85,-11,-92,5,60,16,7, 
  /* [1][0][][] */ -34,8,-49,3,-26,51,14,21,27,-58,-77,107,51,-22,30,34,84,-46,25,86,-34,16,21,23,-1,11,-17,48,14,-7,71,-40,35,65,5,18,24,42,-13,12,-54,-13,-25,-81,-37,-11,4,-46,-44,-60,80,-9,6,28,-71,-19,-13,82,53,57,-41,73,-55,-50,-31,1,62,19,80,41,0,12,-78,55,-35,-3,24,-45,-23,41,-56,53,-36,-127,14,56,-59,-56,45,44,57,23,51,62,33,-16, 
  /* [2][0][][] */ 38,12,-48,72,-18,-44,50,86,-98,73,-36,127,73,-16,75,-91,-27,-43,24,46,-72,13,77,20,-42,55,87,-20,-43,44,61,73,-57,-20,-55,-79,-76,70,72,47,-99,-74,-3,-23,-76,46,9,-67,39,22,67,-111,-37,14,-7,28,-84,86,-33,6,-14,37,-37,52,74,7,46,54,-58,75,-7,-48,21,-62,20,-19,-73,-35,9,-2,22,-74,-11,-87,-5,-92,-28,-35,54,71,-24,11,-38,-58,-19,-63, 
  /* [3][0][][] */ 44,-21,8,-44,-84,100,-117,8,20,-7,30,-22,55,58,38,-17,115,61,-72,-13,73,-99,-79,-80,-44,-119,-92,73,14,-107,49,35,-72,-49,-38,-37,-103,-46,10,27,-45,-101,-106,-17,45,3,-65,-96,108,-95,11,50,55,33,60,-107,-124,-122,-124,-73,-106,88,-52,37,23,-34,-77,-41,-51,-85,-21,60,-6,-115,22,-64,9,127,56,-78,-101,-104,6,57,2,15,-61,-124,-95,12,-24,-111,56,-28,-101,8, 
  /* [4][0][][] */ 31,78,-22,14,-25,22,35,-17,47,45,17,-15,4,-2,-33,32,40,30,22,-9,63,-66,39,24,45,22,11,-4,-43,10,-54,0,37,71,-5,-57,-30,-6,6,31,-2,4,94,-13,15,113,-14,70,48,5,-48,48,-64,49,30,-11,78,-50,13,36,40,-42,59,-45,-54,40,3,51,-3,-55,-40,-56,-2,36,100,101,52,16,-11,-37,3,-25,-54,33,32,77,58,22,-64,-11,36,27,13,127,-87,92, 
  /* [5][0][][] */ 87,-92,66,76,35,-99,11,65,57,-86,-9,-18,28,80,47,22,64,30,-60,93,26,67,14,-19,-115,-54,0,-103,51,15,21,-80,-38,-3,-45,15,-108,-28,37,80,-88,-62,25,64,-45,-22,57,-55,-127,86,28,-32,35,-19,8,-2,55,60,-26,-32,25,-63,21,-55,-15,60,-9,14,76,27,74,-51,-45,58,-26,-102,-27,-58,16,64,89,33,24,33,-75,43,-20,17,51,-96,95,83,-21,23,82,-84, 
  /* [6][0][][] */ -10,-63,67,36,-103,-19,-31,27,-37,-98,-25,-106,46,21,69,-125,6,-30,-25,57,-95,-126,62,19,-74,-97,-38,-72,-53,-126,9,-91,-107,-127,-67,-116,-39,4,-121,39,50,17,-7,-38,-117,64,-103,-63,-60,-12,-53,-39,20,-81,52,-50,-17,-34,-90,68,-114,-26,33,-91,-74,32,57,-66,39,-31,-116,-34,22,-91,-103,-63,-87,-100,-76,-49,-1,-50,9,-41,-86,-103,-65,-107,42,55,56,-14,-69,-80,32,-53, 
  /* [7][0][][] */ 75,57,-39,-44,-76,101,-28,2,88,4,-84,-46,37,-67,37,86,34,22,18,107,65,14,-13,52,-44,107,34,48,-70,112,-30,31,17,14,63,87,-93,92,7,-70,88,-74,110,64,40,-21,79,-94,11,-41,-92,-101,-12,61,21,8,110,-92,12,-67,6,-34,88,-103,-64,-75,78,23,-105,2,57,86,65,24,73,53,-77,54,-81,63,97,-52,4,-98,78,23,-127,72,95,13,96,46,-81,-33,-8,-51, 
  /* [8][0][][] */ 7,37,-51,-90,31,38,-69,-44,1,13,17,51,-5,-42,-87,-70,-39,79,-76,-3,1,-30,57,90,-95,57,18,63,-73,-5,-95,92,84,-26,23,-22,77,-25,-42,34,54,73,-103,-98,10,-15,-43,63,46,-87,-80,44,-71,8,-32,-87,40,68,-88,86,68,30,19,64,-51,-18,-43,75,-92,22,32,-24,60,27,-10,19,-3,127,43,44,9,57,-115,-7,35,32,70,-52,11,-52,-83,75,-70,-78,-66,58, 
  /* [9][0][][] */ -18,-17,71,15,45,-30,-58,-127,31,25,-32,17,-44,-87,-109,-49,11,-17,-112,-83,-15,62,-97,-110,102,-29,-35,11,-33,-75,-102,72,37,-19,2,-39,-73,-13,-57,-61,30,-88,23,-99,112,26,-115,20,61,-33,-99,17,36,-82,-84,67,56,-72,10,-27,-51,76,55,-89,-103,-3,61,17,-59,58,83,-101,-15,45,-115,-96,-49,-52,-56,66,3,1,60,39,-60,-101,28,-37,61,8,-50,69,73,-27,41,-56, 
  /* [10][0][][] */ -54,52,75,-54,-15,77,78,36,1,30,14,-20,90,61,-17,0,-25,50,-87,-47,-20,39,43,-56,-4,42,-90,-119,-36,54,-75,-70,65,79,110,58,-47,4,-32,81,-51,76,-116,-49,-103,-87,17,-61,-38,-6,35,-53,51,-15,-84,-18,-127,2,33,-39,-8,61,80,38,107,-88,-72,-29,27,-1,-95,-49,66,40,-72,51,-48,36,60,10,62,-10,38,29,-91,34,69,-38,21,-7,-13,-51,-60,-45,-21,-74, 
  /* [11][0][][] */ 93,-22,-21,85,71,40,4,27,59,80,-100,127,-3,-72,37,-75,-21,-126,54,36,24,90,-3,-99,-96,-83,-7,25,70,-23,1,-14,-88,-70,52,31,-71,62,-40,24,-37,50,-75,-39,-64,-89,-41,-83,-18,77,69,-1,-106,-107,-12,34,-86,-41,-18,-81,-71,50,65,-12,19,37,-35,15,82,78,-70,-71,26,82,-93,-2,-106,17,-36,62,-99,-27,-63,-113,36,-94,-13,-38,-95,-17,4,-92,-78,-22,-73,-55, 
  /* [12][0][][] */ 17,44,-56,5,78,6,-52,54,-104,68,-31,68,-33,5,65,-89,-75,-61,-44,-66,25,20,12,94,-83,-51,110,-123,97,-1,-30,114,-91,-74,-28,12,-15,-68,-23,124,90,9,-119,-65,-38,-124,-2,99,-80,-116,-69,41,29,-38,-106,100,-64,-34,74,67,57,101,-13,52,114,-2,-29,97,68,127,23,72,72,99,-23,-54,-78,14,-101,-97,-61,90,37,-51,-42,1,31,93,-104,-114,80,46,86,-10,46,54, 
  /* [13][0][][] */ 87,-67,82,80,76,90,54,62,36,-73,6,3,75,55,62,-51,-87,-77,-56,28,53,-10,94,-38,-71,34,11,-10,-62,-83,73,32,28,77,-6,27,-72,-19,19,91,-56,45,-41,-14,-47,-9,18,-36,-29,79,-19,-127,-72,-7,66,-55,-58,32,7,-56,-24,84,-75,17,-32,-72,-64,55,-22,6,65,8,-80,24,-63,-65,-122,35,72,-58,43,-78,77,-20,-70,-107,63,77,-12,-56,-66,47,83,-47,73,-13, 
  /* [14][0][][] */ -59,-102,74,67,77,-69,-14,-76,-87,-34,58,105,-16,-82,-67,-80,-64,-38,-10,39,-45,13,28,59,-127,-60,-9,0,-91,-112,-45,16,78,-24,-16,-5,77,98,25,-77,-24,-110,34,62,29,-119,80,-83,39,18,88,-23,97,-42,-31,23,-75,23,70,104,-21,-74,-51,72,-53,-31,67,-110,-69,-49,-81,95,1,64,36,-90,15,-118,53,14,43,-35,-88,-57,-109,-94,-84,71,88,-4,61,-34,45,71,24,36, 
  /* [15][0][][] */ -11,-46,-50,32,49,-106,22,-107,30,-28,-85,-19,63,-24,-98,-120,41,-19,-100,-8,18,-8,32,65,47,29,6,52,-10,20,25,-110,-20,-21,-79,-29,-84,63,62,-81,-14,61,-67,-46,6,-84,-66,-93,-30,-92,-31,12,-110,-108,-69,-33,30,17,-74,68,-61,-80,-24,56,-58,56,-86,-23,-76,-25,29,-89,-13,-47,21,-117,-24,82,63,40,-95,22,-121,-51,-127,-53,-108,8,42,31,-119,-60,22,84,-117,68, 
  /* [16][0][][] */ -66,20,57,-51,19,78,-30,13,60,19,-64,-9,-25,-32,-53,-22,63,73,43,33,74,21,-22,20,15,33,-60,70,-78,21,11,6,-66,52,20,25,-9,28,-29,-93,30,-7,58,75,55,110,27,3,-11,-80,-5,127,-28,112,61,3,49,40,43,17,77,70,41,29,20,38,-34,70,16,33,-14,-11,20,62,43,99,31,80,-75,-5,7,-75,38,96,9,89,86,18,56,16,-4,63,37,-22,-69,29, 
  /* [17][0][][] */ -5,-115,-3,25,-55,-127,-84,-93,-14,-89,30,18,41,6,-105,5,-5,0,46,49,-101,-41,-32,-57,-24,18,-74,-23,50,-66,-45,22,-58,-50,-8,-26,-70,38,-94,-35,-103,-64,-54,-38,-25,-36,37,-115,31,48,-30,-12,-43,24,33,-84,-126,36,-101,-115,-13,-100,17,43,-82,-92,7,-109,-105,-36,35,-6,-25,-124,-76,6,38,-77,0,-81,-22,-46,-88,-111,-123,13,10,-57,-15,24,-108,-110,-40,33,-18,-33, 
  /* [18][0][][] */ -88,56,56,-69,-23,-27,-47,-18,-19,31,-97,-55,-44,2,24,-63,21,-32,18,-31,53,-54,-4,-9,0,-89,-32,127,1,12,-21,16,22,-36,-95,-96,-24,1,-47,91,-49,-19,-56,42,-31,-11,-5,-25,38,-40,29,66,-97,-4,-18,41,4,11,-36,-104,43,74,69,5,-69,-63,-44,43,30,-18,-69,58,-89,-50,-84,-87,53,78,-20,-74,-59,-27,-4,-65,50,-43,30,28,-97,-17,-67,61,41,-60,15,-37, 
  /* [19][0][][] */ -8,3,40,7,25,-25,59,52,60,-80,0,-34,-107,4,-75,27,84,-113,68,24,-45,43,-72,-11,48,-94,-2,-78,-103,-127,-80,17,43,-95,2,-27,-20,-84,-74,-110,14,-123,-94,-14,-95,3,41,-102,2,7,-61,96,-55,-9,-18,-33,-3,58,-25,-47,27,-71,65,28,-86,-25,-48,-25,-34,20,39,-70,-77,-126,-72,-90,-35,-42,-14,68,25,-121,-52,52,-97,-29,-17,-26,52,2,-27,30,-52,90,31,-63, 
  /* [20][0][][] */ -30,68,36,52,-97,122,-5,21,34,-18,-90,-27,-33,53,3,-74,-37,-51,-91,-55,0,-66,-72,-73,85,-90,-118,55,-8,-13,-60,85,63,17,-41,19,24,-52,-38,-119,-86,-26,-80,-95,-1,-40,-86,76,118,-127,-115,108,20,93,15,-26,71,36,85,66,90,-71,-73,-55,-51,-50,-74,-8,-100,-97,-68,39,-79,-90,3,13,123,58,77,76,52,-16,42,23,37,95,-18,58,-2,70,2,34,-7,2,-30,-9, 
  /* [21][0][][] */ 49,56,42,-104,78,-108,51,12,-29,-77,-69,25,-14,9,-54,-91,-116,-27,14,-13,88,-71,60,-94,36,-89,-30,40,1,-9,-12,-43,-20,-2,-90,-117,89,73,-111,-29,-25,-10,9,-27,-115,-98,-92,71,-48,-82,-2,22,27,34,-108,-1,-80,41,-48,89,41,-89,-2,-17,72,3,-35,-83,-103,-14,31,69,6,-37,52,33,-127,-44,57,79,1,55,27,-114,-10,-97,41,-91,-99,62,77,-117,-84,-70,68,-46, 
  /* [22][0][][] */ -4,-61,-76,-86,53,-75,73,36,-92,50,-72,-98,63,-110,-112,-87,-4,47,-125,-60,47,-88,6,1,54,-15,-111,52,-69,-85,-58,-106,13,26,-8,-12,-26,-17,-65,-102,-2,-17,-15,53,19,-112,46,-36,-94,-85,-4,-58,-59,-100,-49,-3,-23,-40,-41,-55,49,-81,-86,-90,-61,-9,-110,-56,61,73,-44,-7,-70,-16,35,-87,4,-74,32,51,65,-101,-69,-127,33,48,49,-49,-52,13,-69,28,-7,-31,-29,60, 
  /* [23][0][][] */ 57,-88,0,49,71,-103,-19,-59,18,-53,51,111,21,-93,32,-52,89,-70,-86,85,73,-39,74,-23,-36,-16,77,-13,63,19,58,-25,-40,26,26,25,59,-6,-99,87,-94,-26,-12,-127,-78,-103,120,7,4,-91,-69,-111,54,-87,-72,87,-104,-2,90,48,-93,-83,-54,-12,33,1,-80,-98,62,19,73,-55,-14,-34,-44,-122,-1,-39,78,78,-52,-46,8,-122,62,-14,72,-32,-89,20,75,-3,83,-36,-9,50, 
  /* [24][0][][] */ -69,-52,-87,-61,-77,-119,-63,-74,19,69,34,11,63,28,-33,-89,-82,15,9,-44,57,-62,-62,-51,21,-30,40,18,61,27,-14,-62,-21,-8,23,10,-68,-70,29,-28,-75,-91,51,-12,-4,-49,2,32,-105,-42,-29,-37,29,15,34,-65,-31,40,-7,-31,40,-22,20,51,-81,44,-34,-70,-79,15,-58,-31,-39,-2,58,50,17,-68,-82,-64,-68,-90,-56,-127,-16,31,-35,-92,4,-85,-1,-71,-29,13,-91,0, 
  /* [25][0][][] */ -78,-76,-77,-16,66,-100,-105,42,-20,-101,-59,22,58,-9,-100,-35,-84,38,30,-105,41,78,-43,-62,-11,-51,-101,10,64,-96,23,88,68,-106,37,55,59,-63,-37,-5,-110,61,-114,-20,45,-12,60,15,-113,77,-81,-51,18,-50,-77,9,-53,43,-123,40,81,21,34,33,-11,41,-14,-13,-85,-13,-44,-114,24,-124,58,-9,33,33,-9,6,32,35,-54,8,-70,-66,-127,-109,-36,-49,84,15,-115,-25,-71,-87, 
  /* [26][0][][] */ 42,-119,-43,-37,-109,16,-30,-39,-99,-127,68,44,-94,-60,-26,-35,98,5,-100,-86,-19,35,64,-5,34,27,-21,24,-19,-27,-104,-13,-41,-71,-113,-118,-76,47,-70,64,-99,75,31,5,-63,55,-58,64,-34,0,-34,124,-15,-52,-26,-103,73,27,33,8,-26,-111,29,-43,68,-22,-80,24,-105,41,57,54,45,-104,-100,-10,35,-66,-109,-17,-49,55,42,-24,66,-20,-47,-9,-92,71,-17,-10,-75,72,14,55, 
  /* [27][0][][] */ -22,-9,-78,-116,-126,-73,-89,-42,71,44,5,-113,-54,15,32,-47,35,-42,13,-102,-112,-24,-51,-36,-106,3,-123,-35,19,-14,-56,-43,18,23,-104,-103,-95,-82,-120,52,-98,41,-4,43,61,56,24,46,85,22,12,-48,-97,-91,-37,-59,50,-55,-115,-86,-60,-82,-70,12,-2,-68,-123,52,5,-21,-127,-26,16,-68,-36,-103,75,-39,39,54,37,-53,57,-37,-86,-75,-50,30,-63,19,-60,-69,11,-24,45,18, 
  /* [28][0][][] */ 35,-36,42,4,-127,-86,-116,-82,-47,-119,11,32,-102,-105,-30,45,40,53,-85,32,-44,-16,-122,-91,-96,28,-102,-83,-95,-93,-37,-53,-108,-25,28,26,8,-112,-66,-6,46,1,-103,6,-104,-43,-24,5,-5,-87,-81,-34,-101,-15,8,-4,11,-48,40,6,-20,-64,-109,-31,13,22,-47,28,-100,-5,-119,-67,19,22,-41,-115,-126,-52,-97,6,-90,-105,58,-34,13,-120,18,-69,-112,-58,-64,-86,-64,22,-85,-73, 
  /* [29][0][][] */ 31,44,28,-72,-99,50,-125,-23,89,-37,-98,-108,76,-116,-71,-64,-47,84,-9,-87,-95,-57,41,-2,-51,-19,-67,-24,-119,-36,72,-4,33,-12,-96,-79,-29,64,-37,63,35,85,-63,60,9,104,-73,-48,26,-31,22,-28,43,-91,78,23,-89,30,-49,96,-127,71,-112,-71,-81,-50,14,58,60,-101,19,-89,81,43,29,11,125,-54,-50,1,-28,-92,-41,-17,44,91,48,54,-58,57,35,58,-117,-14,-21,28, 
  /* [30][0][][] */ 31,18,-25,32,-54,8,-13,52,118,6,78,-42,-57,48,53,91,-15,79,117,-53,75,-49,-58,-7,-21,44,-33,100,-3,-1,-44,14,-48,-24,-67,-9,47,42,95,-5,102,-17,6,114,73,76,53,106,53,78,47,14,72,22,51,61,3,-40,-49,-34,-23,10,19,-5,-57,-30,-15,87,-17,61,58,14,-46,116,113,28,-22,-33,34,14,34,33,-17,105,-42,115,-59,127,81,38,92,24,10,32,21,-5, 
  /* [31][0][][] */ 32,-68,6,32,3,44,-68,-115,-14,-59,-64,-83,36,-87,-59,51,-29,-69,0,-11,13,-8,-43,64,4,-105,-16,10,-96,-94,-1,55,0,7,-92,-30,43,-64,-76,-127,39,-75,-10,30,29,-21,-46,-8,119,9,21,34,-109,-17,-43,-24,-34,3,-27,101,-34,-11,43,-96,8,81,-80,-53,12,-99,-98,-24,-68,-79,-16,-14,-32,-58,-5,32,-64,-37,10,58,18,43,-47,-18,-28,-55,-73,-32,-3,60,-26,-46, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023142122663557529, 0.0027450211346149445, 0.0025192904286086559, 0.0021740638185292482, 0.0035389461554586887, 0.0021445371676236391, 0.0021481115836650133, 0.0019883261993527412, 0.0023133589420467615, 0.0021638774778693914, 0.0021820822730660439, 0.0022550597786903381, 0.0019486147211864591, 0.0023116241209208965, 0.0022167372517287731, 0.0022002484183758497, 0.0028270974289625883, 0.0025186403654515743, 0.0025689019821584225, 0.0021190214902162552, 0.0021326285786926746, 0.0020908163860440254, 0.0024340443778783083, 0.002300596795976162, 0.00270832609385252, 0.0020758283790200949, 0.0021506808698177338, 0.0022764040622860193, 0.0022622817195951939, 0.0020152588840574026, 0.0030134825501590967, 0.0030468669719994068, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1168, -236, 4745, 6007, 6393, -2693, 4046, -2277, -3259, -1333, 9213, -4449, 4961, 6338, 1872, 3179, -935, -251, -3978, 5101, 2485, -1947, 2044, -1548, -1240, 4958, 1712, 3510, 6129, 2369, 4612, 978, 1382, 7040, 5877, 3280, -932, 3043, 2231, -4478, 55, 893, 696, 4097, -1247, 1101, -1989, 728, -9977, 2235, 913, -6575, 6069, -942, 1822, 1277, 2175, 2393, -1074, -4207, -246, 2517, 210, 3929, 6019, 4763, 4207, 5040, 3941, -1342, 2800, 6600, 2751, -1960, 6329, 18017, 2029, -4957, -547, 1086, 11452, 1526, -2682, -1441, 1062, 537, 1447, -4481, 6981, -1723, 4198, 1256, -190, -5412, -593, 1279, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00010686638415791094, 0.00013137233327142894, 0.00010258294059894979, 0.00011747906683012843, 9.2027723439969122e-05, 0.00013009933172725141, 0.00014127735630609095, 0.00016579699877183884, 0.00014015445776749402, 0.0001651678467169404, 8.2627033407334238e-05, 0.00011243495100643486, 0.00010211835615336895, 8.8863191194832325e-05, 0.00013975666661281139, 0.0001721907319733873, 0.00018106561037711799, 0.00019962155784014612, 8.0517893366049975e-05, 0.00011171999358339235, 0.00015299569349735975, 0.00015305128181353211, 0.00015219602209981531, 0.00015343661652877927, 0.00016502180369570851, 0.00013044863590039313, 0.00013760826550424099, 0.00010540617950027809, 0.00010992455645464361, 0.00016348181816283613, 9.7587624622974545e-05, 0.00013363236212171614, 0.00016296122339554131, 8.854709449224174e-05, 8.6081010522320867e-05, 0.00013907461834605783, 0.00015093674301169813, 0.00011500558321131393, 0.00020305912767071277, 0.00016771780792623758, 0.00015771838661748916, 0.00011064028512919322, 0.00014651595847681165, 0.00010252017091261223, 0.00016165940905921161, 0.00014589646889362484, 0.0001607449958100915, 0.00010077941988129169, 7.6254022133070976e-05, 0.00013051008863840252, 0.00022361965966410935, 8.200315642170608e-05, 0.0001104787370422855, 0.00015381911362055689, 0.0001997543586185202, 0.00013049168046563864, 0.00015845423331484199, 0.00011300929327262565, 0.00018431330681778491, 9.0046385594177991e-05, 0.00013215802027843893, 8.6538442701566964e-05, 0.00020840729121118784, 0.00014289453974924982, 0.00010237238893751055, 9.4349212304223329e-05, 8.4088598669040948e-05, 0.00012502947356551886, 0.0001489095448050648, 0.00015278591308742762, 0.00015447828627657145, 0.00010442336497362703, 0.00013455816952046007, 0.00011481229012133554, 0.00011941514094360173, 4.768585495185107e-05, 9.7727985121309757e-05, 0.00012990091636311263, 0.00012039584544254467, 0.00012255030742380768, 7.0281334046740085e-05, 0.00015191540296655148, 8.5045801824890077e-05, 0.00018151954282075167, 0.00012940008309669793, 0.00013714631495531648, 0.0001330050581600517, 0.00011069686297560111, 9.4350732979364693e-05, 0.0001157568913185969, 0.00013216384104453027, 0.00013851170660927892, 0.00013556233898270875, 9.7882511909119785e-05, 0.00020176239195279777, 0.00011890441237483174, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -17,107,-71,34,29,-54,116,82,-101,31,84,-101,93,127,-58,16, 
  /* [1][0][][] */ -7,-44,-81,-48,17,70,30,-127,44,-93,-49,-66,-13,-40,-125,15, 
  /* [2][0][][] */ -5,-61,58,110,31,62,-127,115,-3,-16,80,-55,-6,-72,-65,94, 
  /* [3][0][][] */ 72,-84,81,-20,-24,-60,-6,127,-60,90,108,40,-3,38,4,3, 
  /* [4][0][][] */ -57,-44,7,71,-114,-18,-8,-112,-34,18,56,-29,33,30,109,127, 
  /* [5][0][][] */ 127,-25,-25,-39,-48,3,21,43,48,-38,27,103,101,-3,-124,-5, 
  /* [6][0][][] */ -1,-52,-56,-42,-88,-14,17,-26,-64,-21,-17,22,72,28,127,5, 
  /* [7][0][][] */ -55,30,-43,-95,-29,-57,-51,6,-127,36,-64,-50,-123,-61,26,112, 
  /* [8][0][][] */ 53,27,66,-12,47,22,73,-11,67,-28,38,10,-127,-26,-65,14, 
  /* [9][0][][] */ -19,59,16,-50,-2,-8,13,-26,-15,30,-47,23,21,127,24,5, 
  /* [10][0][][] */ 40,112,-91,70,-31,29,48,3,-72,-30,-67,-108,-127,-63,50,89, 
  /* [11][0][][] */ 38,-9,83,23,-16,-60,34,114,-127,61,6,-23,-3,-14,40,122, 
  /* [12][0][][] */ -76,-45,17,11,-7,-32,127,44,-100,54,33,-24,-5,71,-29,105, 
  /* [13][0][][] */ 0,99,3,50,78,56,-3,74,8,53,-127,-33,-24,45,-51,-93, 
  /* [14][0][][] */ -107,77,24,-4,-26,-30,52,15,-79,63,127,-7,-47,-12,-40,33, 
  /* [15][0][][] */ -1,-17,-127,-34,75,-31,-110,-17,-34,-6,-10,-55,11,-57,-48,46, 
  /* [16][0][][] */ 127,-27,-2,-36,63,-16,1,-30,-29,-8,120,54,39,1,-49,27, 
  /* [17][0][][] */ 37,-3,-11,-79,23,-45,84,-127,42,-17,-78,33,61,100,13,51, 
  /* [18][0][][] */ 67,125,-16,-88,79,-100,-50,-96,-8,127,-82,3,-43,86,30,-18, 
  /* [19][0][][] */ -72,-109,86,-55,-6,-127,63,-19,-14,67,119,63,29,-8,59,-10, 
  /* [20][0][][] */ -13,99,26,-23,21,7,9,-41,56,-2,95,-9,-127,-16,-64,-36, 
  /* [21][0][][] */ -59,21,42,20,87,21,56,50,-127,72,-19,33,14,6,-86,-19, 
  /* [22][0][][] */ 9,-72,39,36,-14,-127,110,0,-2,-31,-25,-81,42,-83,-18,-36, 
  /* [23][0][][] */ -33,-70,31,56,-1,6,14,-38,39,-61,47,-4,7,87,84,127, 
  /* [24][0][][] */ 0,-7,24,67,45,25,-51,-127,54,22,-38,3,-6,45,-7,-28, 
  /* [25][0][][] */ 2,62,17,-44,-22,10,-20,-42,2,34,-75,-23,18,127,44,-6, 
  /* [26][0][][] */ -91,90,26,29,12,-118,15,-20,-25,49,53,70,9,1,-72,127, 
  /* [27][0][][] */ -1,-127,-38,0,-50,105,-11,-46,52,-45,49,-43,12,-54,-127,-39, 
  /* [28][0][][] */ -42,-1,27,67,15,-4,-25,-104,-122,62,127,-17,63,-10,-32,-25, 
  /* [29][0][][] */ -127,111,-30,-47,-41,12,-95,-69,-58,-26,6,-3,-21,-69,-115,31, 
  /* [30][0][][] */ 42,46,-35,100,-127,-99,-49,-1,-57,14,26,-116,108,14,5,80, 
  /* [31][0][][] */ 127,2,-61,-42,-37,28,97,8,-32,-39,30,58,35,5,-45,-7, 
  /* [32][0][][] */ -2,-90,116,5,36,97,61,-12,21,-58,-95,57,-2,114,127,5, 
  /* [33][0][][] */ 23,-18,-85,-51,-61,27,124,-16,48,-70,-9,-71,48,127,-41,56, 
  /* [34][0][][] */ -79,-86,114,31,65,-24,127,-29,-114,3,33,-43,66,97,-82,-45, 
  /* [35][0][][] */ -21,8,-29,22,-69,91,-17,-3,-46,127,33,68,-34,50,10,31, 
  /* [36][0][][] */ 13,-50,127,-64,-47,37,-46,-22,23,-1,-63,71,-12,-83,-63,32, 
  /* [37][0][][] */ 113,-40,116,-26,100,-104,-51,25,-43,125,-71,-4,-127,-62,125,-8, 
  /* [38][0][][] */ 24,76,-20,-53,-28,-48,-106,124,-77,61,-127,-34,-91,-86,-56,18, 
  /* [39][0][][] */ -44,29,-54,-42,-25,-27,60,3,-127,-19,48,69,9,23,-26,3, 
  /* [40][0][][] */ 127,89,31,-99,-26,13,-16,-44,-20,-22,-25,-52,25,61,34,27, 
  /* [41][0][][] */ 127,-80,-37,-16,21,17,-48,-19,94,-37,-6,-52,125,-74,53,-41, 
  /* [42][0][][] */ -4,-48,-51,127,12,-66,-110,29,11,14,-13,34,-87,77,-71,-33, 
  /* [43][0][][] */ -97,-37,-16,-120,-32,9,9,127,73,-118,-14,34,16,-54,-48,114, 
  /* [44][0][][] */ -13,46,27,-35,-23,3,19,127,113,-88,41,62,64,7,-8,22, 
  /* [45][0][][] */ 51,105,-90,89,91,-121,-8,-89,114,-82,55,-86,-28,61,-56,127, 
  /* [46][0][][] */ -28,-12,15,-30,90,-38,-10,34,-18,127,-23,-88,15,39,-19,20, 
  /* [47][0][][] */ 127,-44,-39,-13,100,25,-80,-92,26,127,-83,41,-28,-111,-81,-11, 
  /* [48][0][][] */ 33,42,-19,-114,24,-20,122,-127,41,-7,-47,47,38,85,4,20, 
  /* [49][0][][] */ -24,127,-82,10,44,-41,27,69,-22,12,-10,-92,-64,15,94,-91, 
  /* [50][0][][] */ 3,27,-4,7,-127,-14,-41,-38,32,69,35,15,-32,-38,2,28, 
  /* [51][0][][] */ 112,-56,-46,-10,-22,94,-116,-47,99,-9,-80,127,-74,-98,-55,20, 
  /* [52][0][][] */ -12,-2,25,70,-117,-109,-127,-37,-20,-62,-63,-76,8,-95,67,56, 
  /* [53][0][][] */ -9,50,35,-127,5,78,83,-11,24,-6,-13,-17,74,-101,15,40, 
  /* [54][0][][] */ 44,127,24,-27,-4,-67,-74,31,16,-37,-55,103,44,73,11,45, 
  /* [55][0][][] */ -56,6,78,-11,29,-66,103,92,-127,24,68,4,101,23,-2,-22, 
  /* [56][0][][] */ 110,8,29,40,-38,93,-68,-108,-38,64,-103,21,-62,127,-5,13, 
  /* [57][0][][] */ -43,-62,-48,-17,-78,-112,74,-50,-127,-35,84,74,51,48,-11,52, 
  /* [58][0][][] */ 32,-52,80,62,-18,-91,-24,7,57,4,-127,-65,35,-51,6,48, 
  /* [59][0][][] */ 90,-38,-118,83,-19,11,114,-52,-64,-64,25,-87,-120,-81,7,127, 
  /* [60][0][][] */ 24,11,-21,-1,3,-15,-64,-4,-4,-96,30,127,-41,-118,-55,-41, 
  /* [61][0][][] */ -41,13,84,-77,-103,35,26,127,-42,-72,78,36,101,-7,31,126, 
  /* [62][0][][] */ 56,29,-7,-127,-20,19,8,-38,-4,28,-28,46,24,-20,-64,-58, 
  /* [63][0][][] */ 0,-30,-1,2,-58,-56,-47,12,-68,-12,-19,-15,127,6,59,-8, 
  /* [64][0][][] */ 3,-11,12,64,-110,-52,15,-58,7,127,70,-12,39,-39,-42,87, 
  /* [65][0][][] */ -37,9,-36,-20,-86,76,45,-16,35,-101,114,-76,72,75,-127,73, 
  /* [66][0][][] */ -106,60,-70,-67,-23,-43,-127,-86,-60,93,55,35,-108,3,82,67, 
  /* [67][0][][] */ 8,-19,-127,-121,68,83,17,-25,-37,-4,56,-4,23,36,-2,27, 
  /* [68][0][][] */ 35,19,8,-31,-58,8,29,29,-93,88,127,-9,-7,-44,-93,-15, 
  /* [69][0][][] */ 38,-66,65,-63,-4,-111,1,115,-46,103,127,43,-11,47,-19,-8, 
  /* [70][0][][] */ 26,64,121,55,99,-21,127,41,12,56,-32,35,-72,22,-78,5, 
  /* [71][0][][] */ 14,21,86,-62,-127,-53,-9,-5,-3,-25,-1,-79,-56,0,13,38, 
  /* [72][0][][] */ -54,-109,27,-99,82,-8,32,37,-75,21,-103,-5,79,127,-68,105, 
  /* [73][0][][] */ 12,30,83,-20,116,-127,-20,29,-46,126,-80,15,-126,-104,102,-19, 
  /* [74][0][][] */ -31,-6,-127,-57,72,-20,-39,8,-26,-11,-109,-30,-21,-6,-13,64, 
  /* [75][0][][] */ 121,-59,45,-68,53,35,-127,-14,6,-110,77,-4,12,-5,-41,-33, 
  /* [76][0][][] */ 21,-90,-47,118,41,89,87,38,48,-127,48,71,48,-49,-49,68, 
  /* [77][0][][] */ 9,-6,107,-43,34,-21,-35,-127,29,-5,1,35,14,48,4,-11, 
  /* [78][0][][] */ -27,-5,-6,-18,-52,-78,50,-65,48,-80,-9,-112,-127,-122,-115,-45, 
  /* [79][0][][] */ -84,-64,-46,26,127,34,-7,-1,29,27,4,71,-48,-76,-50,-21, 
  /* [80][0][][] */ 37,-89,17,119,-27,-12,-127,38,31,-20,-19,19,-88,-36,-2,24, 
  /* [81][0][][] */ 79,85,2,102,7,34,16,127,-10,35,103,44,111,7,36,-53, 
  /* [82][0][][] */ -44,4,31,-2,23,-127,-106,-90,14,79,-50,-17,-21,75,-76,-33, 
  /* [83][0][][] */ 63,17,117,-50,-18,-19,-127,15,10,-93,12,-48,-9,20,0,-43, 
  /* [84][0][][] */ 47,-92,-80,53,127,37,80,9,-92,-6,-104,-37,65,2,-78,53, 
  /* [85][0][][] */ 52,83,38,-60,107,16,36,-127,108,-41,14,-41,79,-53,18,-9, 
  /* [86][0][][] */ 127,-40,101,25,-8,-52,86,16,-53,-58,-71,-38,22,2,-54,22, 
  /* [87][0][][] */ 19,13,19,-62,78,-21,-34,-4,63,-53,57,-28,-86,-127,-31,9, 
  /* [88][0][][] */ -94,-38,54,16,1,38,-123,-60,-14,12,-96,-127,-44,-34,-7,-26, 
  /* [89][0][][] */ -54,14,36,-46,29,21,-127,-3,106,1,-85,-1,-12,-75,-41,-42, 
  /* [90][0][][] */ -18,-3,-44,-74,127,13,-35,50,32,67,44,-13,30,9,-62,-29, 
  /* [91][0][][] */ -8,-66,-8,8,-50,19,6,32,-6,-91,-12,-19,1,67,1,127, 
  /* [92][0][][] */ -41,66,18,-9,-50,52,-92,72,-85,11,99,2,-21,127,51,46, 
  /* [93][0][][] */ 15,91,-56,-78,53,92,-96,-5,78,35,45,56,-127,13,-28,68, 
  /* [94][0][][] */ 8,41,73,47,-127,-40,14,-8,1,0,4,-17,-6,-37,11,-9, 
  /* [95][0][][] */ 34,-27,26,25,123,63,-101,69,65,-22,-101,84,31,49,127,0, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0013950176071375608, 0.0017149145714938641, 0.0013391021639108658, 0.0015335539355874062, 0.0012013160157948732, 0.0016982969827950001, 0.0018442132277414203, 0.0021642888896167278, 0.0018295551417395473, 0.0021560760214924812, 0.001078600762411952, 0.0014677088474854827, 0.0013330376241356134, 0.0011600066209211946, 0.0018243624363094568, 0.0022477516904473305, 0.0023636030964553356, 0.0026058296207338572, 0.0010510684223845601, 0.0014583759475499392, 0.0019971826113760471, 0.0019979083444923162, 0.0019867438822984695, 0.0020029384177178144, 0.0021541696041822433, 0.0017028567381203175, 0.0017963174032047391, 0.0013759563444182277, 0.0014349385164678097, 0.0021340670064091682, 0.0012738941004499793, 0.0017444166587665677, 0.0021272711455821991, 0.0011558803962543607, 0.0011236885329708457, 0.0018154591089114547, 0.0019703053403645754, 0.0015012654475867748, 0.0026507030706852674, 0.0021893628872931004, 0.002058831974864006, 0.0014442815445363522, 0.0019125971011817455, 0.0013382828328758478, 0.0021102775353938341, 0.0019045104272663593, 0.0020983407739549875, 0.0013155592605471611, 0.00099540851078927517, 0.0017036589561030269, 0.0029190971981734037, 0.001070456812158227, 0.0014421726809814572, 0.0020079314708709717, 0.0026075632777065039, 0.0017034186748787761, 0.0020684376358985901, 0.0014752062270417809, 0.0024059980642050505, 0.0011754519073292613, 0.0017251708777621388, 0.0011296597076579928, 0.0027205173391848803, 0.0018653236329555511, 0.0013363537145778537, 0.0012316203210502863, 0.0010976798366755247, 0.0016321158036589622, 0.0019438426243141294, 0.001994444290176034, 0.0020165361929684877, 0.0013631267938762903, 0.0017565019661560655, 0.0014987422619014978, 0.0015588272362947464, 0.00062248395988717675, 0.0012757263612002134, 0.0016957068582996726, 0.0015716291964054108, 0.0015997531590983272, 0.00091744191013276577, 0.0019830807577818632, 0.0011101750424131751, 0.0023695286363363266, 0.0016891692066565156, 0.0017902873223647475, 0.0017362278886139393, 0.0014450200833380222, 0.0012316402280703187, 0.0015110729727894068, 0.00172524678055197, 0.0018081108573824167, 0.0017696102149784565, 0.0012777434894815087, 0.0026337758172303438, 0.0015521602472290397, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 9294, 10202, -2537, -3201, 1812, 10947, 2028, -355, 12793, -3984, -4413, 14350, -8231, 16407, -5708, 8727, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.7862882385961711e-05, 8.1686717749107629e-05, 4.2753999878186733e-05, 6.1148151871748269e-05, 8.0401448940392584e-05, 8.068006718531251e-05, 6.6612250520847738e-05, 5.9739242715295404e-05, 0.00012431637151166797, 6.3104882428888232e-05, 7.8807403042446822e-05, 5.0439055485185236e-05, 7.7378143032547086e-05, 6.5110725699923933e-05, 7.3464805609546602e-05, 6.3619852880947292e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -112,23,49,-49,-44,31,-31,-39,-49,8,32,-37,19,24,39,-37,-2,-43,58,1,-28,-61,127,55,77,14,-23,30,-31,-71,-92,-17,-44,-54,22,9,0,30,-30,-6,-18,34,-19,31,-58,3,-20,70,-44,21,-33,-9,-18,-14,28,-33,-113,26,-30,84,84,47,4,-15,-39,-85,-47,28,-59,-68,25,17,24,23,-115,-9,-39,26,-59,31,-42,77,31,-94,22,43,29,54,28,12,10,-31,-79,-68,-39,17, 
  /* [1][0][][] */ 15,0,-7,-56,-56,-1,10,10,-48,19,84,-35,-10,-2,-45,-36,0,5,-57,10,-59,-78,19,17,41,-47,19,-43,44,-52,70,-68,48,1,-8,33,20,70,-14,-52,24,-3,19,22,30,30,-127,-33,-43,-8,-20,-43,32,-49,-52,25,25,-13,-33,-23,29,38,15,-83,7,-48,-47,-16,12,31,-41,22,-16,-4,13,-76,0,18,11,-22,-14,-16,-42,-30,35,-44,-19,10,-63,10,-7,45,7,62,-39,30, 
  /* [2][0][][] */ 125,-9,49,83,-22,-113,52,36,-16,8,-55,-24,-81,-45,31,-66,-119,-45,-12,28,58,-43,-38,31,-22,-84,13,-42,-49,-9,-41,127,-70,105,-50,15,-16,-43,29,34,-91,55,45,-5,-45,30,26,-9,72,-18,-44,-79,65,-28,5,78,61,-34,55,31,-19,38,-31,17,88,25,14,-6,30,39,-40,-28,39,-1,92,48,59,-96,70,18,111,-35,-47,51,-65,79,12,99,-14,7,-40,54,-48,81,-23,15, 
  /* [3][0][][] */ 4,8,5,33,25,-32,43,-74,1,50,0,63,48,-10,-39,34,22,8,37,22,42,127,12,-31,-46,10,-14,-17,72,-9,57,-12,1,69,1,-51,45,52,49,-11,-13,-80,-75,24,-21,3,71,-8,-1,-58,-32,-54,55,-81,-7,-49,-12,89,-15,33,-19,-10,-48,4,2,31,-4,-18,-28,10,13,-70,-43,-16,74,-28,30,-31,-14,-45,-7,-21,-75,29,-52,-23,44,6,-18,-6,29,7,58,18,-30,104, 
  /* [4][0][][] */ 17,5,-72,-15,26,60,-47,-19,-1,75,125,-13,37,10,3,-9,15,-52,-53,25,-8,-73,37,77,-19,7,-127,18,-36,3,-28,-13,-48,-59,7,53,7,29,-15,-5,-41,-5,91,-18,2,20,-34,69,-44,63,10,37,39,-10,-86,22,8,-10,-25,0,66,-9,9,-16,-82,18,-64,1,-53,23,-49,55,45,-66,-69,-37,-2,-23,-47,38,-38,82,-68,-36,-7,3,7,-53,59,43,37,11,-88,-44,38,6, 
  /* [5][0][][] */ -63,27,27,-30,62,-8,71,-33,-5,11,7,-43,16,-19,-34,-49,5,-38,22,11,-127,-28,-64,25,-37,-9,36,48,22,-22,-31,34,33,106,-6,32,-29,36,7,-37,-27,92,108,-33,-13,73,0,-7,-15,25,-11,45,12,-19,14,-105,21,-50,-81,-70,61,74,-46,-17,51,-10,-72,-72,-32,-13,-10,8,-3,-8,-46,-27,13,-9,-40,17,81,-1,14,-123,-41,-10,17,-39,-25,40,26,-37,-56,-5,28,74, 
  /* [6][0][][] */ 40,3,-39,39,-34,-107,51,94,-4,68,-21,54,-97,-61,68,35,-26,-34,23,35,61,7,-82,-33,-100,26,56,9,9,-11,87,6,15,12,51,-71,-3,-6,34,84,2,7,-91,-40,-8,-64,-27,42,44,-87,-37,41,-7,10,-32,-49,82,7,43,17,-127,27,-91,-1,34,26,4,45,35,53,16,-66,-37,11,103,0,58,-35,62,-111,-12,-57,-46,74,-4,-38,29,14,-39,54,-19,23,20,28,-37,81, 
  /* [7][0][][] */ 39,80,-27,-16,-36,-46,-4,41,-69,44,-67,-21,-44,31,30,-10,-43,-35,-14,58,27,127,-1,22,-42,4,32,-3,35,-8,93,-9,69,8,-20,-12,8,-28,66,71,-83,-33,-44,-64,7,-37,77,-6,48,-78,-70,-29,-22,18,15,4,29,15,-60,26,-29,89,34,-35,-7,-1,-37,67,-26,-29,-69,4,-15,48,17,48,-33,30,29,-99,-13,-56,62,-10,35,0,-5,23,-9,43,-96,60,82,-6,-74,-11, 
  /* [8][0][][] */ -22,48,-32,-4,3,0,-57,7,-77,-28,24,-9,-14,16,19,75,-1,-48,-21,0,-14,-12,16,-9,4,46,-23,40,-9,23,-41,-24,-33,-23,-22,-49,-32,30,-7,-12,-5,-3,64,10,-35,-13,-25,-11,-40,-10,41,70,-7,-8,-55,74,-43,39,-9,-36,-21,12,0,34,-37,-51,-40,-9,-46,3,3,19,-14,-29,-127,-1,-39,41,-64,-5,-37,19,-47,-66,13,-26,17,22,18,57,-44,-10,-84,-120,21,-31, 
  /* [9][0][][] */ 11,44,-93,98,-83,-73,67,85,-4,58,-42,118,-25,-17,34,125,11,22,111,32,75,35,9,-86,-71,3,50,-38,-3,-59,57,48,-22,-20,-3,-127,22,-42,24,19,-28,-23,-24,-35,4,-5,53,17,53,82,24,-42,-42,-94,-5,-9,25,-31,83,-13,-84,50,-44,-32,106,-1,-14,8,-54,29,33,14,-21,82,19,-39,-21,-13,-25,-51,80,-58,84,50,16,15,-25,-36,-73,-2,5,21,97,88,-57,-16, 
  /* [10][0][][] */ 86,23,-27,22,-60,-51,46,27,21,-14,-50,24,-62,-10,6,-13,-34,6,28,12,84,22,6,5,-75,75,57,-29,-55,-89,-12,14,52,-29,69,13,61,-70,80,127,2,-72,-33,-1,-26,-65,22,43,56,50,-68,-41,7,28,17,17,35,-46,32,41,-33,40,-40,-11,22,-39,25,49,28,-14,-1,8,77,13,69,-80,29,-54,34,-37,-24,-1,47,46,-38,3,-2,13,-42,-16,4,67,44,87,-34,-12, 
  /* [11][0][][] */ -31,-21,3,-39,34,-13,-1,-36,17,-29,-12,-7,-39,18,-7,-11,-26,19,34,-21,-36,-18,-66,-64,-12,16,-81,11,33,-56,-3,-35,3,-17,45,0,-58,2,-88,7,-108,32,-62,50,12,19,-3,-40,36,-45,-57,-40,42,17,49,-95,-10,-88,-21,-56,-11,-2,-16,-121,15,-95,60,79,127,-12,95,11,-22,-33,7,-16,85,20,-5,37,3,-10,27,90,96,-13,18,-33,-45,-31,-11,7,32,55,52,68, 
  /* [12][0][][] */ 46,7,-3,-30,11,65,7,35,50,50,-10,54,-5,26,21,-3,-42,16,7,33,127,6,36,-42,-11,23,-15,-51,-36,30,-9,32,12,-11,22,-19,24,-18,-16,-8,-11,-37,9,27,-20,23,30,-11,-22,5,-4,11,-11,-9,-1,-15,-15,24,10,52,-1,-47,-3,-69,0,86,-33,-34,-7,-20,52,-23,-22,5,22,32,-4,16,-70,-31,-18,9,82,48,-8,64,-13,-46,38,12,-74,41,58,21,-23,-75, 
  /* [13][0][][] */ 30,67,-53,-21,-56,-4,39,-34,6,-2,-7,-85,0,-101,-1,-67,-31,-65,-75,-7,-58,-22,14,94,-48,4,127,-24,19,-35,-3,22,-19,-31,-103,67,-47,-71,8,-53,67,13,-29,-4,25,-62,63,-11,66,-14,-39,4,16,-19,-10,47,79,-77,-42,-14,57,21,-16,-91,9,24,-30,1,-12,-27,-49,-12,-33,5,-21,-110,-96,-1,14,44,18,31,19,-82,52,70,24,-6,-26,-7,10,3,-60,34,-43,-24, 
  /* [14][0][][] */ -29,10,-45,-48,107,102,-66,3,-14,-43,102,-76,21,-23,-31,-80,-85,43,12,127,-40,-18,41,-9,14,29,-20,123,25,20,-20,16,52,19,-19,-23,-25,58,56,20,92,34,59,14,4,-21,5,-44,14,2,14,-12,28,-28,8,46,8,61,-48,-20,-19,-68,-34,-91,12,-60,-31,-18,-90,45,24,52,-3,-18,-27,-49,55,8,11,-13,40,34,-34,-19,-30,43,-13,-4,-25,53,59,3,4,-79,-59,-41, 
  /* [15][0][][] */ -27,-15,33,-9,-15,-43,-24,-50,18,15,-25,95,-18,-29,35,86,-95,-16,38,-41,82,-4,-32,-67,2,-2,86,-57,-61,-127,-55,55,-36,28,62,-83,11,-43,46,7,-24,-25,-21,-41,-15,-55,107,88,-3,-25,18,-49,-66,52,14,-44,-54,-18,122,45,-58,0,-91,35,-45,-2,12,16,41,-36,62,-51,42,-40,32,-49,11,-8,25,-28,-24,55,54,71,-17,28,-105,39,-24,-66,-106,46,94,2,-32,38, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0024591723922640085, 0.0034716853406280279, 0.0018170449184253812, 0.0025987965054810047, 0.0034170614089816809, 0.0034289027098566294, 0.002831020625308156, 0.0025389178190380335, 0.0052834455855190754, 0.0026819575577974319, 0.0033493146765977144, 0.0021436598617583513, 0.0032885710243135691, 0.0027672059368342161, 0.0031222542747855186, 0.0027038436383008957, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -5306, 5075, 3436, -4264, -6017, 1540, -93, -4048, 333, -6458, 8596, -929, -903, 14359, 9717, -2259, 20943, 3812, -3036, -2373, -961, -12657, 1564, -2112, 1990, -6105, 374, -6644, -8955, -11409, -4428, 1703, 11812, -4849, -3990, 304, -662, -2563, -2649, 12553, 2064, 697, -1660, -4148, 14660, 5024, 4732, 11585, -3867, 7718, 8472, 6394, -2595, 2829, 1073, 10559, -2331, 1135, 18738, -1144, 6815, 13804, 5857, -8078, 9252, 1663, -890, 2352, 834, -6954, 5675, 6158, 8279, 292, -1340, 12411, 3203, 3412, 2375, 1001, -1052, 16173, 710, 823, 9821, 720, -6142, -7957, 2573, -2874, 14517, 570, -9077, 5, -5017, -8690, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00016993794997688383, 0.00013135175686329603, 0.00010898582695517689, 0.00015411064669024199, 0.00024330601445399225, 0.0002418317599222064, 0.00021274755999911577, 0.00012181301281088963, 0.00025905220536515117, 0.00013636752555612475, 0.00013133244647178799, 0.00047216325765475631, 0.00021235700114630163, 8.1000624049920589e-05, 9.0217901743017137e-05, 0.00017695185670163482, 8.0387137131765485e-05, 0.00020239780133124441, 0.00020865903934463859, 8.4344508650247008e-05, 0.00020651766681112349, 0.00016156502533704042, 0.00022217897640075535, 0.00016550035797990859, 0.00038799355388619006, 0.00012317548680584878, 0.00029970068135298789, 0.00010693869990063831, 0.00014278272283263505, 7.0983551268000156e-05, 0.00027506909100338817, 0.00018472320516593754, 0.00011874437041115016, 0.00013493622827809304, 0.00019225472351536155, 0.00018761899264063686, 0.00016883012722246349, 0.00017681386088952422, 0.00022038200404495001, 0.00011352499859640375, 0.00015792055637575686, 0.00021915016986895353, 0.00018221484788227826, 0.00012336712097749114, 6.2296479882206768e-05, 0.00016187911387532949, 0.00021728248975705355, 9.6201765700243413e-05, 0.00016223895363509655, 5.6519122153986245e-05, 0.00011106144665973261, 0.0001071703591151163, 5.5756961955921724e-05, 0.00014229673251975328, 0.00013562726962845773, 0.00012071527453372255, 0.00021509081125259399, 0.00026621314464136958, 0.000122997080325149, 9.595141455065459e-05, 0.00019753802916966379, 0.0001098436550819315, 0.00013605822459794581, 9.9586199212353677e-05, 0.00010919669148279354, 0.0001862576900748536, 0.00050717091653496027, 0.00019500912458170205, 0.00013847016089130193, 8.9516899606678635e-05, 0.00016127376875374466, 8.7576714577153325e-05, 0.00012313769548200071, 0.00011340301716700196, 0.00028258390375413001, 0.0001121200984925963, 0.00011178687418578193, 0.00012700997467618436, 0.00018822379934135824, 0.00015276337217073888, 0.00022995389008428901, 6.9384346716105938e-05, 0.0002303583751199767, 0.00022672901104670018, 8.4252096712589264e-05, 0.00017284975911024958, 0.00012467704073060304, 9.104533091885969e-05, 0.00022043901844881475, 0.00025345280300825834, 9.1281632194295526e-05, 0.00036465475568547845, 0.00020289167878217995, 0.00024223730724770576, 0.00016586318088229746, 0.00014924249262548983, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 75,52,-69,126,3,18,73,33,76,-55,-61,28,-15,31,-22,-22,-77,21,24,18,66,127,74,127,19,19,-52,33,7,-34,71,-5,-81,35,0,127,13,0,21,-47,17,-11,76,127,-80,-40,-2,2,23,-115,-23,-72,-49,14,-80,15,14,-48,-56,-74,-65,15,-69,-8,-15,41,-68,28,-55,79,54,26,0,-38,52,-20,-127,-24,-84,37,-16,-14,32,35,43,-63,12,5,-127,88,-110,23,56,-26,3,35, -44,-66,-78,105,22,91,-38,-19,52,13,-127,-25,-32,-55,-34,127,-14,88,28,127,127,79,82,91,-15,6,31,17,89,119,-3,-103,2,127,56,47,24,120,13,-127,127,-13,106,36,-73,-127,127,-63,-27,-127,-46,-118,102,127,-27,-127,3,31,-115,-119,-46,-127,-33,112,-40,82,17,-109,-48,127,103,-66,-61,-24,-18,-101,-52,-127,16,127,-47,-81,127,-41,6,-43,111,121,110,127,-127,-42,127,-42,127,69, 11,-127,-60,1,12,-16,-11,61,25,-26,-54,22,26,12,-14,-46,-123,-10,5,55,79,105,89,81,34,-14,-25,116,127,30,16,-48,-51,-15,4,90,-23,79,20,-57,-11,14,4,6,-68,-33,-1,18,-3,-80,50,-66,96,-39,39,-28,10,-64,-35,-84,-56,42,-68,-18,2,57,-22,-4,-101,39,-21,5,12,-97,-31,20,-124,-21,-81,25,-8,-127,-14,16,28,-49,-13,33,-69,8,-31,-7,16,28,4,27, 
  /* [0][1][][] */ 99,-21,19,127,19,-33,113,51,-23,-90,-51,127,-31,-83,-94,24,-100,-81,17,17,-43,12,-102,-52,-68,127,-127,127,-80,59,127,84,39,78,0,67,-122,51,-22,-82,82,-127,8,68,-127,36,-5,-127,-75,-58,-96,-28,127,-79,71,-37,-127,18,-66,65,23,-90,9,-10,-127,-21,127,-53,-25,45,-44,-127,-67,127,127,-127,34,32,10,-43,127,-94,-66,127,5,-17,19,21,-42,-50,-23,59,3,-69,24,11, -127,0,-108,95,-58,-127,-127,-127,34,31,-25,-38,-81,-127,-52,97,-28,-127,127,104,13,-122,-127,80,-127,77,33,57,-30,-18,-108,54,-127,70,127,-79,27,127,127,-86,-62,14,12,9,-39,31,-109,-94,14,-124,-127,127,57,52,54,-97,-3,17,91,29,-43,-27,-99,127,-26,-127,86,127,29,53,-127,-104,-46,110,-80,-41,101,106,127,-34,-49,-84,-70,53,-103,-58,127,127,75,46,-109,-127,-25,-79,37,127, 84,-40,45,84,29,-9,15,74,-52,103,-22,64,6,-59,-127,49,-8,-83,12,62,-29,41,-73,-75,-12,35,89,87,87,127,64,-127,-45,-99,-8,96,-127,17,-6,-75,-12,66,35,113,-17,47,-13,-16,127,-101,-31,-64,62,-107,-96,22,87,-30,-127,124,-6,-67,-39,12,93,-43,-47,-24,-99,-40,-92,-46,-32,-117,-42,-21,17,-35,-57,-14,-45,-108,-27,97,-29,39,-21,84,-26,-41,-31,65,7,127,23,3, 
  /* [0][2][][] */ 39,-110,42,85,28,33,16,90,-53,-17,-16,-9,11,-51,38,-18,-48,-7,-15,62,-37,47,23,-37,56,72,-17,23,47,36,-23,-8,-8,-19,-12,-18,113,-54,0,0,-50,10,-7,-12,-40,-56,-29,-63,-55,28,-23,43,14,-22,-127,-1,-15,-17,-16,96,-84,-27,77,-8,-122,30,-93,7,0,2,53,110,-3,102,30,-35,-94,-79,-5,-71,0,44,-38,-19,-83,8,-42,-50,-77,19,19,52,24,-22,13,11, -7,-13,127,-26,127,95,-39,57,-127,52,-76,-41,127,-75,-60,-57,-107,40,-7,10,-39,21,1,27,67,-24,-21,-3,57,114,-13,-31,-6,43,13,16,56,113,11,-91,-41,-34,-127,-11,-33,64,-62,-61,20,-28,-26,74,122,-76,-62,-18,24,127,-65,9,103,-122,127,102,-88,-2,-121,34,127,66,5,20,-127,-9,-16,-121,1,-110,-16,-72,-12,-54,-51,-107,-127,127,56,-17,64,29,40,-17,27,-9,16,-16, 87,38,-4,1,15,-10,-36,89,-19,127,26,-28,1,-33,-35,2,-127,1,-91,47,-61,64,20,-69,-14,71,21,72,3,21,-26,-74,-39,-6,-43,35,74,62,12,-55,-83,23,23,35,-12,-37,-51,-20,78,53,-52,35,78,-8,4,35,40,-40,-33,127,-127,12,4,23,-58,-24,-111,1,22,12,8,77,22,-2,-18,29,-40,-2,-9,-19,4,-83,-3,-24,-28,47,-16,97,-54,26,-3,47,31,11,45,-8, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0081713851541280746, 0.0063159866258502007, 0.0052405316382646561, 0.0074103367514908314, 0.011699253693223, 0.011628365144133568, 0.010229865089058876, 0.0058573205024003983, 0.012456402182579041, 0.0065571675077080727, 0.006315058097243309, 0.022703744471073151, 0.010211084969341755, 0.0038948762230575085, 0.0043380847200751305, 0.0085086459293961525, 0.0038653772789984941, 0.0097322016954421997, 0.010033270344138145, 0.0040556653402745724, 0.0099303033202886581, 0.0077687771990895271, 0.010683369822800159, 0.0079580061137676239, 0.01865648478269577, 0.0059228343889117241, 0.014410964213311672, 0.0051420964300632477, 0.0068656387738883495, 0.0034132101573050022, 0.013226565904915333, 0.0088823270052671432, 0.0057097664102911949, 0.0064883441664278507, 0.0092444764450192451, 0.0090215699747204781, 0.0081181162968277931, 0.0085020102560520172, 0.010596963576972485, 0.005458795465528965, 0.0075935348868370056, 0.01053773146122694, 0.0087617142125964165, 0.0059320493601262569, 0.0029954966157674789, 0.007783879991620779, 0.010447924956679344, 0.0046258158981800079, 0.00780118303373456, 0.002717694966122508, 0.0053403368219733238, 0.0051532355137169361, 0.0026810469571501017, 0.0068422704935073853, 0.0065215728245675564, 0.0058045363985002041, 0.01034253928810358, 0.01280073169618845, 0.0059142559766769409, 0.0046137780882418156, 0.0094985216856002808, 0.0052817799150943756, 0.0065422947518527508, 0.0047885547392070293, 0.0052506709471344948, 0.0089561119675636292, 0.024387070909142494, 0.009376920759677887, 0.0066582714207470417, 0.0043043773621320724, 0.0077547724358737469, 0.0042110844515264034, 0.0059210173785686493, 0.0054529299959540367, 0.013587911613285542, 0.005391241516917944, 0.005375218577682972, 0.0061072143726050854, 0.009050651453435421, 0.0073455539532005787, 0.011057223193347454, 0.0033363131806254387, 0.011076672933995724, 0.010902156122028828, 0.0040512220002710819, 0.0083113983273506165, 0.0059950361028313637, 0.004377871286123991, 0.010599705390632153, 0.01218715775758028, 0.0043892338871955872, 0.017534250393509865, 0.0097559494897723198, 0.011647865176200867, 0.007975451648235321, 0.0071762539446353912, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5772, 3640, 182, -3727, 5409, 7008, 4319, 1411, -1661, 7606, 636, -5239, 4037, 2817, 405, -731, 2894, 10210, 143, -502, 4460, 23337, 14569, -805, -3664, -2087, 9729, -308, 4990, 1008, 7174, -1690, 15539, 2150, 6195, -4401, -425, -4177, -100, 2973, 1991, 1698, 2177, -952, 1641, 2008, 10009, 3640, 3832, 1770, 3411, 2313, -1484, 1661, 2195, 1884, 2393, 382, 11714, 2137, -1613, 4699, 3746, 3940, 3834, 3870, -7031, 2668, 5882, -134, 8550, 1717, 2683, 3249, 5889, 1903, -710, 1926, 2490, 3186, 1746, 1157, 7576, -1594, 1235, 4695, 539, -404, 16779, -2118, 1603, -2613, 10829, 2332, 1824, 378, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00012526097998488694, 0.00012926584167871624, 0.00015456328401342034, 0.00010065657261293381, 0.00013057859905529767, 0.00010001395276049152, 0.00015712757885921746, 0.00020034384215250611, 0.00013387772196438164, 8.7155021901708096e-05, 0.00015959457959979773, 0.00010739819117588922, 0.00014853774337098002, 0.00012835902452934533, 0.00015919387806206942, 0.00015493150567635894, 0.00017959506658371538, 8.0042802437674254e-05, 0.00015177768364083022, 0.00015267411072272807, 0.00013685750309377909, 4.4137934310128912e-05, 7.0558482548221946e-05, 0.0002250702673336491, 0.00013206098810769618, 0.00010966679110424593, 9.0645189629867673e-05, 0.00018290821753907949, 9.344542195321992e-05, 0.00016227048763539642, 9.1179848823230714e-05, 0.00017265268252231181, 5.0375114369671792e-05, 0.00018174618890043348, 0.00011102399002993479, 0.00012105829227948561, 0.0002025693393079564, 0.00013355376722756773, 0.000157231479533948, 0.00012747809523716569, 0.00020281306933611631, 0.00018623046344146132, 0.00017173808009829372, 0.00019307951151859015, 0.00014795557945035398, 0.00016670396144036204, 6.5282663854304701e-05, 0.00015917448035907, 0.00010923148511210456, 0.00016680544649716467, 0.00013354062684811652, 0.00019359402358531952, 0.0001746478519635275, 0.00018955775885842741, 0.00010284962627338246, 0.00016507950203958899, 0.00013844028580933809, 0.00019036619050893933, 7.2284827183466405e-05, 9.5489231171086431e-05, 0.00016551204316783696, 0.00014235023991204798, 0.00012062987661920488, 0.00016240186232607812, 0.0001249001215910539, 0.00015932619862724096, 9.5946190413087606e-05, 0.00017743537318892777, 0.00010747838678071275, 0.00017873763863462955, 9.5413597591686994e-05, 0.00016498930926900357, 0.00015562715998385102, 0.00014130040653981268, 0.00010339733853470534, 0.00016902205243241042, 0.00016476002929266542, 0.00016854668501764536, 0.00014514088979922235, 0.00015839264960959554, 0.00018111515964847058, 0.00015775069186929613, 8.8420252723153681e-05, 0.00014917626685928553, 0.00015371739573311061, 0.00014135103265289217, 0.00017044192645698786, 0.0002085469604935497, 5.5807726312195882e-05, 0.00012754580529872328, 0.00014926466974429786, 0.00010068924893857911, 7.1093039878178388e-05, 0.00013391848187893629, 0.00014636765990871936, 9.2281625256873667e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -73,69,17,-9,-19,-31,-56,10,38,-13,67,-59,88,-127,-39,-73, 
  /* [1][0][][] */ -85,43,-70,-79,-29,30,-28,22,-36,32,75,-21,81,127,-22,16, 
  /* [2][0][][] */ -20,-24,-93,59,-15,-52,28,-50,-89,78,60,31,60,96,-7,127, 
  /* [3][0][][] */ -47,-103,-5,-43,-15,-52,-71,-127,43,-5,15,-53,-42,-77,-89,-18, 
  /* [4][0][][] */ 30,14,-28,5,-21,5,-127,-4,-8,29,-21,27,16,5,-67,-103, 
  /* [5][0][][] */ -17,36,-55,24,19,-17,-22,-48,116,-58,-23,-26,14,-127,-106,-36, 
  /* [6][0][][] */ -37,-43,4,-6,-35,40,14,-44,28,-42,40,4,16,-19,-127,-53, 
  /* [7][0][][] */ -35,79,127,-59,-9,27,2,-25,-25,27,2,-25,53,-6,48,36, 
  /* [8][0][][] */ 3,51,19,-3,34,11,43,127,-34,-13,-13,-91,48,72,-25,-43, 
  /* [9][0][][] */ -18,37,110,26,9,-44,-99,-127,67,34,108,31,8,-107,-15,-41, 
  /* [10][0][][] */ -23,-118,20,-95,-127,85,-11,-1,-46,-105,18,9,-41,-15,-90,-44, 
  /* [11][0][][] */ 85,-89,24,87,-94,-86,-18,-17,59,114,-54,37,30,-121,-30,127, 
  /* [12][0][][] */ -15,-58,127,69,39,9,-9,57,88,-32,29,30,-1,36,-84,39, 
  /* [13][0][][] */ 0,13,31,-2,-23,21,127,17,-107,10,-21,-20,-21,111,95,-66, 
  /* [14][0][][] */ 96,-96,40,-3,44,92,127,35,21,36,-5,35,106,-33,-1,39, 
  /* [15][0][][] */ -27,73,-7,-3,-2,127,-28,89,-34,2,15,-1,-8,86,26,-9, 
  /* [16][0][][] */ -46,71,110,-88,20,105,3,-25,35,13,-12,16,54,-53,42,127, 
  /* [17][0][][] */ -16,102,50,-41,29,-9,-6,-48,-66,111,57,44,-127,-11,79,20, 
  /* [18][0][][] */ -48,-14,-73,-47,127,70,-24,-55,-9,37,71,64,-14,81,-45,17, 
  /* [19][0][][] */ 38,67,61,78,58,-24,-41,15,31,127,29,76,30,16,-37,52, 
  /* [20][0][][] */ 33,-23,-10,38,-45,29,-9,58,-28,-16,-65,-54,127,-25,25,-3, 
  /* [21][0][][] */ -127,-20,10,105,-66,-4,-116,43,-53,23,21,7,-19,56,-32,3, 
  /* [22][0][][] */ 22,-27,-77,-31,127,26,10,38,19,11,30,-18,26,16,-13,54, 
  /* [23][0][][] */ -73,41,-30,-4,0,40,127,33,26,110,-22,-16,-46,-5,-26,-5, 
  /* [24][0][][] */ 23,-51,1,-93,92,8,123,-127,7,-29,88,21,-33,48,-22,-15, 
  /* [25][0][][] */ 127,-77,27,21,23,-28,-12,44,109,-43,-46,17,86,-62,45,60, 
  /* [26][0][][] */ 41,0,6,47,64,-15,-38,-28,31,23,25,127,24,-28,-20,-15, 
  /* [27][0][][] */ -66,15,-56,-3,-23,90,5,-39,93,-51,127,2,2,-91,32,91, 
  /* [28][0][][] */ -18,42,-48,-127,-13,-92,29,-99,-69,89,-72,56,-37,4,-17,44, 
  /* [29][0][][] */ 57,116,-63,74,22,113,-66,11,57,34,20,51,-127,12,19,79, 
  /* [30][0][][] */ -67,14,-110,-100,68,-63,15,-65,-32,70,-51,52,-13,63,-26,127, 
  /* [31][0][][] */ 3,-127,55,65,48,-66,-84,13,-36,59,-34,-48,-67,56,71,73, 
  /* [32][0][][] */ -52,62,4,83,-127,83,4,111,-7,-85,47,-67,39,100,106,71, 
  /* [33][0][][] */ -31,-2,36,64,-16,10,-20,28,-39,-36,12,-23,25,0,41,127, 
  /* [34][0][][] */ 18,-5,-127,-86,54,-5,28,75,21,-22,-6,-17,-57,-37,-31,114, 
  /* [35][0][][] */ 115,13,60,-9,-18,26,-127,-56,4,-124,-55,27,-79,-88,122,-29, 
  /* [36][0][][] */ 40,-17,-127,46,46,81,-2,64,40,59,-9,36,1,24,-24,36, 
  /* [37][0][][] */ 69,47,35,-44,66,-127,40,13,-95,76,-76,4,3,66,53,-16, 
  /* [38][0][][] */ -33,127,19,-95,91,18,52,-72,-28,-59,-110,17,-63,-46,-69,8, 
  /* [39][0][][] */ 92,82,-89,-127,8,-72,32,-84,14,15,-8,-11,62,-8,-122,-66, 
  /* [40][0][][] */ -60,42,-18,-55,-43,-19,12,-127,14,13,-3,-22,24,64,30,29, 
  /* [41][0][][] */ -73,-92,22,127,-13,-20,-39,27,4,-24,20,-89,-122,2,55,18, 
  /* [42][0][][] */ -20,113,1,-127,8,-8,-21,26,51,72,-2,-50,82,-38,-4,-24, 
  /* [43][0][][] */ 0,28,-24,3,127,33,-8,39,9,37,-35,-105,-92,-30,-7,16, 
  /* [44][0][][] */ 77,-15,47,95,-53,-21,-12,94,24,-19,27,-22,127,-17,-44,14, 
  /* [45][0][][] */ 37,-40,-68,16,-71,-83,-5,27,-14,-1,25,11,-79,127,54,-54, 
  /* [46][0][][] */ 50,-47,13,80,-41,20,-58,127,-14,-90,80,-83,119,104,75,95, 
  /* [47][0][][] */ -32,-77,6,76,32,15,38,8,-27,-58,-127,9,50,-22,-83,45, 
  /* [48][0][][] */ -127,21,-26,-5,59,-18,-40,-112,6,19,88,14,53,-90,-92,-34, 
  /* [49][0][][] */ -26,-5,60,-51,14,0,127,127,-29,-71,-2,22,-10,31,-47,41, 
  /* [50][0][][] */ 48,-40,-63,-3,52,-76,-34,-14,-33,-4,-3,41,-41,-127,-92,-45, 
  /* [51][0][][] */ -28,22,-37,127,-1,-3,-35,-74,-36,-62,4,22,-16,70,-26,87, 
  /* [52][0][][] */ -127,-19,5,46,26,83,49,38,8,-98,-30,-33,-62,-33,-81,40, 
  /* [53][0][][] */ -12,-47,-32,-127,-33,12,7,69,22,-88,-23,54,-48,35,52,33, 
  /* [54][0][][] */ 36,24,-37,-59,-120,13,127,-45,-15,-113,49,-31,-47,-69,-47,122, 
  /* [55][0][][] */ 47,-28,-54,28,41,-47,45,72,-33,-58,-127,-35,74,-11,-4,24, 
  /* [56][0][][] */ -19,62,-84,-26,-127,57,-88,31,-47,53,-4,4,97,-25,63,46, 
  /* [57][0][][] */ -15,22,-30,62,127,67,-21,66,-22,25,-1,41,-46,50,-101,-77, 
  /* [58][0][][] */ 43,-21,7,-41,71,47,-36,-59,64,-105,-77,0,-127,-59,-40,43, 
  /* [59][0][][] */ -113,9,51,-43,47,-51,-22,-84,48,127,-6,22,-70,-20,-24,23, 
  /* [60][0][][] */ 6,7,-14,9,-127,11,16,24,-22,24,-11,-16,-7,-11,64,22, 
  /* [61][0][][] */ 0,44,-75,-22,-29,-21,-101,-82,-26,18,65,127,66,-19,74,55, 
  /* [62][0][][] */ 61,-29,-101,-81,-42,43,45,127,-27,102,-53,68,22,15,104,104, 
  /* [63][0][][] */ 12,-119,6,-7,-51,20,32,-41,9,-25,-16,-6,-7,127,54,-5, 
  /* [64][0][][] */ 58,14,-127,-11,46,-8,-7,-29,31,-66,-35,101,62,-48,-120,37, 
  /* [65][0][][] */ -22,-6,39,95,48,37,33,68,-36,25,-127,-73,78,49,-65,-16, 
  /* [66][0][][] */ -35,-106,-81,-127,-31,-93,43,-54,11,-22,-12,77,-36,-58,-36,43, 
  /* [67][0][][] */ -41,-22,-59,-69,-30,103,16,-101,-98,-1,-87,-127,-21,2,-12,-29, 
  /* [68][0][][] */ 84,113,36,40,-22,127,-43,-77,-69,-74,-33,12,2,-41,113,-107, 
  /* [69][0][][] */ 36,2,46,-55,-15,-50,-49,-24,-23,127,-39,15,17,26,41,-37, 
  /* [70][0][][] */ 50,21,-33,98,-127,60,-70,-68,78,105,23,79,75,-43,30,55, 
  /* [71][0][][] */ 91,-47,31,79,-26,-15,-5,3,127,-26,-19,9,-2,-29,14,67, 
  /* [72][0][][] */ 8,-56,33,99,28,-9,-127,42,86,0,-8,8,-22,-38,-48,47, 
  /* [73][0][][] */ 84,1,5,-82,37,-127,-27,36,34,116,-48,-2,-57,-76,55,6, 
  /* [74][0][][] */ 48,57,37,10,-127,-11,47,13,-80,-3,35,-55,14,-37,28,20, 
  /* [75][0][][] */ 50,127,-52,-11,31,16,-22,-26,-56,-26,17,18,-76,42,55,71, 
  /* [76][0][][] */ -36,-55,-89,-54,-60,-9,127,17,-39,18,64,16,0,-78,-34,92, 
  /* [77][0][][] */ -90,127,-10,37,-40,-54,28,45,-1,-12,35,60,-63,35,65,72, 
  /* [78][0][][] */ 127,-9,-46,79,-54,16,-116,-34,0,-49,-22,6,30,-124,-10,93, 
  /* [79][0][][] */ -48,-44,81,60,-68,-44,-9,-20,-22,-37,22,63,-48,127,-13,52, 
  /* [80][0][][] */ 36,56,38,-91,-19,22,127,4,4,-13,-10,4,101,-10,32,10, 
  /* [81][0][][] */ 25,-79,21,-17,127,30,-40,81,93,54,-9,-10,-16,-5,-84,-51, 
  /* [82][0][][] */ 111,84,15,55,123,-59,9,124,81,108,24,110,-127,26,61,-101, 
  /* [83][0][][] */ -67,18,91,1,20,93,85,62,-50,9,-24,-127,-46,72,-34,-102, 
  /* [84][0][][] */ 23,-127,-50,20,32,-82,-52,11,-36,53,-68,25,-99,75,-19,-59, 
  /* [85][0][][] */ -57,80,-24,-17,-29,-61,-44,-54,-29,21,88,-82,-127,-113,-8,117, 
  /* [86][0][][] */ 5,32,99,87,69,-71,41,11,-14,4,-52,-40,-3,101,-127,-86, 
  /* [87][0][][] */ -56,33,111,-54,-127,-26,32,19,17,-27,12,50,-11,59,-8,-12, 
  /* [88][0][][] */ -1,-47,-127,20,31,38,12,49,-48,-35,-51,-66,76,-2,45,60, 
  /* [89][0][][] */ 46,26,-5,-122,-30,-86,-8,72,127,10,33,-119,6,-12,92,-63, 
  /* [90][0][][] */ 19,64,-5,-19,-48,70,36,127,9,-77,-11,91,26,-11,-36,36, 
  /* [91][0][][] */ -84,4,-57,60,39,29,-67,-54,2,99,8,70,-58,-127,-66,8, 
  /* [92][0][][] */ -36,79,-5,46,-127,16,-117,73,-69,44,98,67,12,33,72,20, 
  /* [93][0][][] */ 22,59,67,17,-127,-50,43,59,-46,-36,26,-71,16,-28,-29,10, 
  /* [94][0][][] */ -37,-127,38,-90,1,58,-8,24,103,-18,28,43,13,47,-51,44, 
  /* [95][0][][] */ -54,-74,-85,-72,127,80,-87,31,116,51,-100,90,-76,102,-126,-6, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0018847580067813396, 0.0019450177205726504, 0.0023256593849509954, 0.0015145440120249987, 0.0019647702574729919, 0.0015048747882246971, 0.0023642433807253838, 0.0030145032797008753, 0.0020144109148532152, 0.0013113910099491477, 0.0024013635702431202, 0.0016159828519448638, 0.0022349951323121786, 0.0019313730299472809, 0.0023953341878950596, 0.0023311998229473829, 0.002702303696423769, 0.0012043758761137724, 0.0022837454453110695, 0.0022972335573285818, 0.0020592466462403536, 0.00066412799060344696, 0.0010616686195135117, 0.003386553144082427, 0.001987075200304389, 0.0016501176869496703, 0.0013639063108712435, 0.0027521555311977863, 0.0014060403918847442, 0.0024416269734501839, 0.001371951075270772, 0.0025978442281484604, 0.00075797660974785686, 0.0027346708811819553, 0.0016705389134585857, 0.0018215215532109141, 0.0030479896813631058, 0.0020095366053283215, 0.0023658068384975195, 0.0019181180978193879, 0.0030516569968312979, 0.0028021442703902721, 0.0025840825401246548, 0.0029051995370537043, 0.0022262355778366327, 0.002508335979655385, 0.00098228524439036846, 0.0023950424510985613, 0.0016435676952823997, 0.0025098628830164671, 0.0020093389321118593, 0.0029129411559551954, 0.0026278647128492594, 0.0028522089123725891, 0.001547542167827487, 0.0024838931858539581, 0.0020830621942877769, 0.0028643731493502855, 0.0010876443702727556, 0.0014367928961291909, 0.0024904015008360147, 0.0021418940741568804, 0.0018150752875953913, 0.0024436037056148052, 0.0018793282797560096, 0.0023973253555595875, 0.0014436686178669333, 0.0026698077563196421, 0.0016171894967556, 0.0026894023176282644, 0.0014356548199430108, 0.0024825360160320997, 0.0023416671901941299, 0.0021260974463075399, 0.0015557834412902594, 0.0025432154070585966, 0.0024790861643850803, 0.0025360626168549061, 0.0021838839165866375, 0.0023832784499973059, 0.0027251760475337505, 0.0023736192379146814, 0.0013304284075275064, 0.0022446028888225555, 0.0023129316978156567, 0.0021268592681735754, 0.002564579714089632, 0.0031379328574985266, 0.00083971925778314471, 0.0019191368483006954, 0.0022459330502897501, 0.0015150357503443956, 0.0010697119869291782, 0.0020150241907685995, 0.0022023427300155163, 0.0013885291991755366, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27578, 3385, 1786, -14186, 5700, -9673, 16878, -12730, 6784, -7749, 18152, 10777, 2257, -22095, -2940, 16151, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 5.9219488321105018e-05, 9.6070318249985576e-05, 4.4215601519681513e-05, 6.1111051763873547e-05, 8.3038947195746005e-05, 0.00010540093353483826, 4.8067009629448876e-05, 6.1366736190393567e-05, 0.00010152517643291503, 0.00010195650975219905, 7.1199596277438104e-05, 6.6456530475988984e-05, 8.6573061707895249e-05, 8.7769120000302792e-05, 6.6104912548325956e-05, 7.0929432695265859e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 1,-6,35,-3,-9,-67,-2,-49,2,-84,-6,-34,70,-55,22,28,-95,-4,22,-17,99,30,-92,-4,47,83,127,40,-9,98,71,-36,5,-7,-8,-26,37,65,-49,-28,93,3,48,-37,8,-14,-32,-49,-28,-63,81,44,-73,19,17,6,42,-41,55,26,11,3,-65,-24,11,61,109,38,7,8,43,38,-8,35,7,5,59,-36,54,21,52,32,49,57,-63,-13,-6,58,-1,19,-87,-13,-13,-24,93,94, 
  /* [1][0][][] */ 16,42,-22,10,0,-33,51,-25,-46,-13,0,-34,-5,-30,15,-27,-18,-15,-35,-18,-23,-75,110,-37,-9,-2,11,46,-16,9,-27,4,-21,4,13,19,-28,29,-5,30,12,2,5,-3,19,-10,11,23,-44,7,14,-70,-32,29,46,20,30,15,-52,0,-46,-20,2,-16,13,16,12,-9,-43,-127,21,5,-26,23,-24,-2,-37,-15,49,-17,8,-15,16,-35,-24,-26,-6,-5,-14,8,16,17,20,-2,-11,66, 
  /* [2][0][][] */ -5,-6,23,6,74,29,-62,35,-46,27,-2,-17,38,12,54,22,11,-42,-127,2,-27,-9,1,15,-13,-12,-40,39,-46,-38,6,70,-26,-20,19,-1,-62,9,-4,-10,63,-15,39,27,10,83,47,8,-81,28,-13,16,-15,21,45,-44,16,14,42,0,-8,-16,3,32,21,-28,-24,24,-14,-23,-7,-42,-7,43,14,70,-60,-35,-16,-36,5,7,34,-27,-5,-40,-21,-61,-21,-21,-25,53,24,10,104,-58, 
  /* [3][0][][] */ 55,-26,-15,-63,40,1,123,-44,-19,94,-126,-6,-10,-5,-50,49,45,44,7,41,-45,57,-27,72,-64,70,34,21,-29,-21,-25,65,-8,-34,-17,-32,-26,-34,-35,78,-11,27,-13,17,43,-25,17,42,15,-24,7,-7,64,6,21,-41,-20,-6,-11,-10,-6,17,46,-27,-29,-22,114,-6,-35,-29,-61,62,42,-62,-34,-64,3,-27,127,-63,-22,-34,-64,-33,-49,-60,32,85,-41,27,-55,3,-19,-88,8,37, 
  /* [4][0][][] */ 18,55,29,14,-32,-28,-59,-29,43,-14,38,-28,9,23,9,57,-11,-23,-7,-92,28,-26,-20,-27,-1,-30,3,-2,-53,127,-55,-47,20,-27,-7,-7,83,38,-65,-26,34,0,2,-33,-37,-25,84,-10,63,-41,-32,0,-46,46,24,60,-22,53,-38,34,-28,-45,5,13,53,40,-47,-11,20,32,-9,-91,18,52,79,49,-25,16,-61,66,27,73,24,-29,35,-22,-5,-28,-23,-30,-74,-27,2,-10,11,-48, 
  /* [5][0][][] */ -2,-17,73,-27,-37,-46,-22,-1,41,7,7,11,-33,-43,21,2,-7,3,-49,-43,-20,7,-27,18,15,-42,54,-28,-11,48,-17,114,-18,-114,15,17,-28,-13,-51,-11,-69,-27,-41,2,-7,12,-73,44,-3,16,57,-24,37,-70,7,5,-27,-42,-12,-29,72,38,-1,80,-39,11,75,-46,3,0,7,-25,27,16,30,9,-16,-15,127,54,-49,-23,-48,29,38,77,19,94,13,-41,0,25,-12,-30,-39,-6, 
  /* [6][0][][] */ -51,-36,74,6,-54,54,-31,-55,6,-81,-71,51,12,52,-53,50,2,-12,34,-12,-60,-42,-84,-78,-35,-35,-17,72,-77,36,-2,-5,39,68,-13,-11,1,-54,45,-12,-49,69,58,-39,25,57,-52,-20,37,-14,-96,-127,96,25,-25,-9,50,-28,38,-40,-55,-17,65,0,26,-86,-40,-3,-86,-33,15,-85,-81,-87,17,-60,76,0,-57,59,-32,59,42,-73,66,-44,-23,-10,-59,62,-59,62,60,-13,60,-59, 
  /* [7][0][][] */ -19,-2,-49,63,-4,-14,34,10,-75,4,53,48,-4,-57,-25,-31,-9,20,14,59,-89,-1,-38,-5,26,18,-1,81,41,28,25,26,-37,-113,36,77,-27,32,-26,69,0,-2,26,-48,29,51,10,81,-28,78,-5,-3,5,-27,62,-45,-44,18,-29,-55,22,9,13,-63,78,-94,127,4,-78,-34,79,-13,-43,-24,-83,-42,36,-51,83,-62,0,0,-63,-47,10,23,-64,25,34,11,13,47,64,2,104,-26, 
  /* [8][0][][] */ -1,-72,28,-10,-22,-4,6,-27,14,-13,66,34,9,15,-56,14,63,-2,-1,-16,23,-67,-21,-32,6,-31,65,-19,-37,46,-9,-11,2,1,6,-10,-29,-6,-2,-40,-6,37,16,-43,25,-25,27,-9,52,-12,39,3,-16,-3,-32,-8,2,100,-21,30,18,-62,-54,28,-71,12,-23,10,31,64,46,-24,9,-127,47,-100,8,5,-54,41,-19,-8,11,68,52,-57,-28,41,-37,81,4,-12,-53,-20,-18,-63, 
  /* [9][0][][] */ -22,4,-59,31,20,24,19,58,-59,6,44,37,-26,78,23,-56,-19,30,-21,-37,-11,52,2,15,-52,9,-3,35,33,-17,22,-25,-26,-26,-8,73,-18,-31,69,12,-13,-26,29,12,-11,36,36,40,-60,7,-27,36,127,11,-25,35,-5,-31,30,2,-60,4,91,12,-7,-35,53,20,8,-50,-39,37,-22,-105,-49,-100,-31,3,39,-12,-24,38,-9,-67,39,22,-60,-1,3,97,38,10,58,68,-5,37, 
  /* [10][0][][] */ 19,71,6,18,-6,11,-35,-10,49,4,-47,29,14,22,0,-63,-30,-6,33,19,6,0,-25,-36,-15,-17,-87,57,-25,43,16,2,22,11,-31,21,22,-8,-4,20,33,-23,75,-51,-47,-3,40,48,8,24,-11,-31,-21,-20,8,46,-25,7,-38,-19,-64,-40,16,-1,-6,-53,-105,-2,-84,-83,30,-29,-52,35,25,23,37,-6,-98,-2,-27,27,-10,-15,10,20,-74,-127,-3,32,27,-1,36,-17,39,12, 
  /* [11][0][][] */ 53,-28,11,21,-33,13,33,-8,58,-39,-45,-20,-16,-11,3,-9,-7,61,18,-68,48,32,-7,-35,33,37,79,-1,-23,-38,-12,10,16,89,-127,49,51,-11,10,12,-61,4,-24,7,-50,-40,24,21,27,-29,-16,28,-12,-15,-102,111,-6,-4,-27,-11,80,-5,-9,-52,-18,-47,-113,-69,-17,4,-125,54,21,38,2,2,-17,69,-101,-45,-2,5,-25,-7,-20,9,46,82,20,-24,2,-19,-83,-9,111,20, 
  /* [12][0][][] */ 16,55,-24,13,49,-47,-10,32,39,-40,-8,11,13,-20,-17,-12,-6,-54,-35,13,-3,60,-22,55,-74,-24,-104,7,55,-27,36,-23,-23,-81,52,-11,21,-18,-12,56,-10,-52,13,37,14,14,6,13,-64,23,-59,83,76,-32,33,-51,-23,24,-67,-45,-11,33,77,4,-28,-29,21,39,68,-13,22,1,-26,-36,-34,-2,-41,-89,39,-64,11,-12,11,-27,-31,-11,-2,-127,-2,28,-41,32,-13,67,29,17, 
  /* [13][0][][] */ -31,8,-52,33,23,-29,8,21,18,44,-26,50,-36,-7,49,-15,-12,69,29,-23,-16,-34,-15,24,27,43,-15,35,16,51,53,-19,-14,67,-28,75,13,-24,-76,-16,3,-50,1,36,55,54,-71,27,-55,10,34,2,-28,-11,91,28,21,-64,-1,-32,8,29,-29,-29,14,78,127,31,27,22,-70,-49,31,22,-60,33,14,-75,102,-88,9,-11,4,-12,-1,46,-7,-36,-2,-21,-1,50,45,3,52,38, 
  /* [14][0][][] */ -8,16,-2,30,-20,-26,10,46,-71,-13,79,-24,-43,-43,95,-41,-27,56,-76,0,5,-5,-127,2,-16,30,-45,-79,25,0,26,67,-60,35,3,-13,-5,-25,-29,-54,-6,-50,-3,-10,14,83,-97,13,-45,-28,97,27,0,8,-35,29,-19,-3,4,36,56,38,-19,41,6,-6,21,-51,11,66,55,28,-35,22,23,-26,17,-15,29,-14,-48,89,3,-105,74,10,3,14,-107,13,-21,16,-17,-29,38,59, 
  /* [15][0][][] */ 26,-16,-8,29,53,19,1,-1,-11,24,-93,-16,24,49,10,-35,-5,6,-48,53,3,-9,-18,36,29,-22,59,43,33,-31,-1,43,10,55,-20,-65,47,42,47,47,83,39,-10,-12,-45,-78,31,-25,-59,-31,-20,-4,15,-52,-38,55,-25,-12,-17,-2,-14,-58,-17,3,12,8,-73,43,-47,-60,-23,8,-8,-103,-41,-96,-22,10,-127,9,54,-38,39,-1,-57,-5,-8,-20,22,73,18,-83,-18,8,27,-37, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0025168282445520163, 0.0040829884819686413, 0.0018791629699990153, 0.0025972195435315371, 0.0035291551612317562, 0.004479539580643177, 0.0020428479183465242, 0.0026080862153321505, 0.0043148198164999485, 0.0043331515043973923, 0.0030259827617555857, 0.0028244024142622948, 0.0036793549079447985, 0.0037301874253898859, 0.0028094586450606585, 0.0030145007185637951, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7124, -1667, -4076, 3044, -8296, -3116, -2190, 2706, 3985, 31, -23, 7529, 11083, -3289, -11, -9582, 973, -5647, -11554, -9158, -3003, 294, -1150, -758, 12, 16787, -10882, -8077, -9652, -4807, -2363, -4800, 10213, -1487, -7085, -1993, 1826, 5103, 3035, 14541, -1038, 4578, -3073, 9654, -1003, -8212, -376, 1402, -2778, -413, -5391, 1020, -663, -4296, -9722, 3969, 2125, 3938, -60, 5607, 1704, -2631, -187, 9014, 22524, 2464, 10702, 7202, -1168, -1621, 8190, -4139, -435, 1743, -4432, -890, 22076, 15220, 7015, 1969, 11919, -1202, 3775, 1980, 23, 4327, 11638, -6113, 18243, -1173, -5306, -9617, -2195, -1090, 18638, -970, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012281523959245533, 0.00032062045647762716, 0.00018220552010461688, 0.00019268562027718872, 0.00014517866657115519, 0.00038033604505471885, 0.00010031721467385069, 0.00015672011068090796, 0.0003341912233736366, 0.00021196696616243571, 0.00035107971052639186, 9.4245435320772231e-05, 6.1306294810492545e-05, 0.00018247132538817823, 0.00023091255570761859, 0.00011613517563091591, 0.0002969438792206347, 0.00018367292068433017, 0.00011322634236421436, 0.00015455385437235236, 0.00020261657482478768, 0.0002290879056090489, 0.00034867800422944129, 0.00021395922522060573, 0.0034224577248096466, 7.0854075602255762e-05, 0.00019407205400057137, 0.0001087790442397818, 0.00018782423285301775, 0.00015293224714696407, 0.00016512697038706392, 0.0001595545036252588, 8.0730133049655706e-05, 0.00038516335189342499, 0.00012625270755961537, 0.00020571236382238567, 0.00027750254957936704, 0.00010618112719384953, 0.00015224984963424504, 9.01290841284208e-05, 0.00044717159471474588, 0.00014061469119042158, 0.00017985618615057319, 9.1807800345122814e-05, 0.00011525675654411316, 0.00019811780657619238, 0.00032830913551151752, 0.00026804141816683114, 0.00016093632439151406, 0.00049352453788742423, 0.0001798310549929738, 0.00017483299598097801, 0.00015068076027091593, 0.00024061977455858141, 0.00016017841699067503, 0.00022111972793936729, 0.0001495148753747344, 0.00038620756822638214, 0.00027745205443352461, 0.00014361024659592658, 0.00034464153577573597, 0.00023072284238878638, 0.00018996233120560646, 0.00011926070146728307, 8.8782566308509558e-05, 0.00026941701071336865, 0.00015649013221263885, 0.00015334589988924563, 0.00021680224745068699, 0.00047850888222455978, 0.00020183666492812335, 0.00023722129117231816, 0.00043446855852380395, 0.00016550777945667505, 0.00014173785166349262, 0.00019352290837559849, 4.9199377826880664e-05, 0.00016729734488762915, 0.00015122734475880861, 0.00023348505783360451, 7.2910188464447856e-05, 0.00023821572540327907, 0.00017143873265013099, 0.00052645354298874736, 0.00011156808614032343, 0.00024129616213031113, 0.00012370928016025573, 0.00025397242279723287, 6.7716224293690175e-05, 0.00022248955792747438, 0.00016280464478768408, 0.0001795614225557074, 0.00030505444738082588, 0.00018833152716979384, 0.00011153239029226825, 0.00035517115611582994, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -22,-16,-2,-50,127,-19,103,-36,-1,-68,-13,-58,24,4,20,31,-19,10,-58,34,12,35,-28,38,-8,-91,-5,44,55,40,22,48,-122,9,9,-25,3,-49,-105,-61,16,40,83,-19,-30,34,-26,47,-56,45,-37,52,-66,17,58,-39,-28,-27,-6,-18,-39,-9,17,-10,-38,-18,-37,32,-13,15,8,4,19,14,-26,-37,49,9,127,-13,-40,-23,-75,-37,-15,-40,-18,12,-53,5,34,12,-1,31,-82,5, 15,13,36,-75,4,-18,112,-105,-15,-70,-37,-15,-60,-35,-118,127,-14,95,-31,34,-10,127,47,110,34,-32,51,52,127,27,127,10,-127,1,-127,-33,-14,-51,127,-58,-9,-127,29,-56,15,-22,46,15,83,-4,-7,127,-97,19,-32,15,-113,-2,-12,30,23,-81,-102,-71,-98,-9,-5,-39,-12,0,30,127,-127,-51,5,-36,-127,-127,-13,-127,-101,-33,45,-5,127,41,-127,24,-65,-5,-8,26,0,127,-30,-74, -11,6,-29,9,113,0,111,-59,-23,-22,-22,-73,-20,-20,-10,-6,-18,29,44,45,25,46,-30,51,-11,13,-22,7,46,-10,28,53,5,-6,40,21,-5,-73,-117,-127,-8,-16,91,19,-11,0,-46,-56,-56,9,3,58,7,5,95,-20,9,-30,3,-26,-17,3,-27,8,-111,-20,127,-17,3,-2,-65,25,3,4,12,30,-101,-38,-6,-54,-5,-41,-85,-16,-4,-42,38,-62,-95,-35,-36,59,-3,28,-127,50, 
  /* [0][1][][] */ -76,-13,20,-24,75,95,-52,14,9,-109,-27,-48,-127,60,9,38,-12,80,78,54,75,-38,57,-8,16,-23,110,77,27,26,25,-8,-58,4,111,-52,-38,19,-109,-64,-19,-31,98,-61,-44,127,-50,-63,48,60,71,-59,-127,22,79,-46,24,-24,39,-9,-3,-52,74,-36,-78,16,-25,-40,-34,17,-127,35,83,127,20,-58,-110,-26,-43,46,-56,7,-21,-10,-32,3,-67,47,-116,127,42,-31,127,-21,-18,-19, 61,127,127,127,-114,-127,127,-80,127,127,-50,-127,-99,127,-41,-5,127,-127,127,112,127,-92,127,-127,-127,-127,127,127,-88,127,-21,127,-57,127,113,-76,127,96,47,-49,127,-17,-127,-127,127,-5,127,113,127,-127,127,-98,86,127,-125,127,-127,127,-127,127,-127,127,68,-53,100,127,-13,127,-121,-127,45,-79,27,124,127,57,97,-31,88,-39,10,127,60,127,92,56,-75,127,-115,40,-7,5,-66,-10,-43,-17, -127,-15,35,-42,35,48,-65,-17,-38,-59,-6,73,-100,38,1,54,-25,96,110,127,34,0,14,-24,41,43,10,-23,8,-66,19,4,-6,-26,91,127,-23,-13,-79,-68,-58,33,36,-74,-77,-4,-80,-127,-22,119,77,-31,60,36,127,-67,73,-24,48,-67,1,21,-127,-127,-120,25,-39,-23,-12,37,-108,29,49,-59,8,127,-36,7,-41,55,-108,0,-38,-6,-50,-5,-104,70,-127,-69,127,127,-21,-12,-110,1, 
  /* [0][2][][] */ -38,-68,-25,12,32,45,-47,7,-34,-44,33,-77,55,13,-20,6,-2,17,-31,-22,-48,-30,-79,-5,20,-29,19,41,19,41,11,35,-2,4,108,-5,-21,-12,-24,6,-5,4,22,-35,71,53,39,-13,-91,-18,-43,-66,50,-1,65,-8,49,-30,38,-81,-2,8,4,-83,-79,-76,99,-43,11,43,-20,23,-4,-40,6,-31,-87,-16,-36,52,-76,35,-127,-40,-71,-26,6,-32,-62,-5,-19,6,8,-21,-23,-44, -15,-52,21,-79,-15,38,20,127,-65,35,127,-64,-116,-3,127,126,-12,-35,121,-116,-48,-45,31,3,40,3,37,46,22,32,-85,-19,-39,-35,-51,38,-49,-95,102,-106,-16,-123,-13,48,99,22,12,-32,93,-29,-43,-37,107,20,-6,-70,-28,-58,43,-81,115,39,105,-11,-127,-111,-25,-97,127,35,-4,-1,36,-44,55,7,-73,-108,2,91,-60,1,8,-68,32,-127,-28,18,-85,12,46,35,6,-103,-122,127, -20,40,2,13,53,21,-15,-10,-39,-56,11,-6,-3,1,-9,84,-11,51,-10,1,-37,-7,-86,-10,-18,78,-29,-43,21,62,-49,44,69,-2,6,49,-42,-127,12,-7,-61,-51,-2,-44,1,32,16,24,-35,65,-2,-67,40,-7,78,-36,39,-12,13,-77,-38,24,1,-48,-76,-50,-50,2,27,36,-67,18,-38,-64,-2,-1,-92,-75,89,36,-127,18,41,9,-32,-20,27,24,-49,19,16,44,9,2,30,-7, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0053688399493694305, 0.014015850611031055, 0.0079650729894638062, 0.0084232082590460777, 0.0063464525155723095, 0.016626304015517235, 0.0043853442184627056, 0.0068509839475154877, 0.014609092846512794, 0.0092660877853631973, 0.015347369946539402, 0.0041199177503585815, 0.0026799906045198441, 0.0079766921699047089, 0.010094289667904377, 0.0050768228247761726, 0.01298083458095789, 0.0080292196944355965, 0.0049496637657284737, 0.0067562866024672985, 0.0088573377579450607, 0.01001452561467886, 0.015242379158735275, 0.0093531785532832146, 0.14961196482181549, 0.0030973698012530804, 0.0084838159382343292, 0.0047552511096000671, 0.0082106934860348701, 0.0066853985190391541, 0.0072184880264103413, 0.0069748889654874802, 0.0035290992818772793, 0.016837328672409058, 0.0055191083811223507, 0.0089926691725850105, 0.012130960822105408, 0.0046416837722063065, 0.006655567791312933, 0.0039399722591042519, 0.019548004493117332, 0.006146939005702734, 0.0078623723238706589, 0.0040133572183549404, 0.0050384229980409145, 0.0086606750264763832, 0.014351959340274334, 0.01171736977994442, 0.0070352945476770401, 0.021574312821030617, 0.0078612733632326126, 0.007642784621566534, 0.0065869749523699284, 0.010518638417124748, 0.0070021627470850945, 0.0096661988645792007, 0.0065360087901353836, 0.016882976517081261, 0.012128753587603569, 0.0062778894789516926, 0.015065926127135754, 0.010085996240377426, 0.008304160088300705, 0.0052134543657302856, 0.0038811096455901861, 0.011777503415942192, 0.0068409307859838009, 0.0067034810781478882, 0.0094774607568979263, 0.020917907357215881, 0.0088232439011335373, 0.010370074771344662, 0.018992694094777107, 0.0072351349517703056, 0.0061960378661751747, 0.0084598101675510406, 0.0021507395431399345, 0.0073133651167154312, 0.0066108689643442631, 0.010206745937466621, 0.0031872524414211512, 0.010413546115159988, 0.0074944053776562214, 0.023013796657323837, 0.0048771733418107033, 0.010548206977546215, 0.0054079229012131691, 0.011102346703410149, 0.0029601992573589087, 0.0097260801121592522, 0.0071169682778418064, 0.0078494865447282791, 0.013335385359823704, 0.0082328701391816139, 0.004875612910836935, 0.015526226721704006, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1055, 9564, -727, 2482, 4764, 15343, 201, 3739, 10279, -1423, 6591, 3834, 931, 8, 3920, 1966, 4418, 3787, 1011, 8986, 876, 6588, -1875, 326, -9663, 975, 3832, 1091, 6081, 1259, 4187, 2186, 2382, 7526, 5803, 3043, 3870, 1086, 1446, 1370, 15650, 765, 2172, 1591, 1036, 6275, 2701, 2961, 620, -3486, 1052, 8329, 2374, -3417, 4499, 97, 4706, 26301, 767, 1090, 1840, 3213, 4141, -887, 8295, 10583, 3061, 6143, 13269, 2859, 7057, 1236, -2961, 2372, 1023, 3504, 194, 19743, 3982, 8101, 2532, 2558, 4405, 35928, 169, 5796, 4926, 2585, -33, 2599, -1389, 6327, 2493, 2219, 4115, 2113, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00028427955112420022, 8.4801489720121026e-05, 0.00016704245354048908, 0.00017115563969127834, 0.00015232559235300869, 6.5349573560524732e-05, 0.00027263505035080016, 0.00012166475062258542, 0.00010016031592385843, 0.00015158312453422695, 0.00011604387691477314, 0.00014360941713675857, 0.00018365430878475308, 0.00031846488127484918, 0.00014308368554338813, 0.00013173723709769547, 0.00015205137606244534, 0.00016388086078222841, 0.00016596178465988487, 8.8407767179887742e-05, 0.00026503283879719675, 0.00010274777741869912, 0.0002051310584647581, 0.00023517863883171231, 8.9265151473227888e-05, 0.00017748727987054735, 0.00016799835429992527, 0.00029541726689785719, 0.00011849673319375142, 0.00025701563572511077, 0.00016302584845107049, 0.00020690158999059349, 0.00021403552091214806, 0.00010881994239753112, 0.00010700759594328701, 0.00019521411741152406, 0.00012452647206373513, 0.00016598145884927362, 0.00019864887872245163, 0.00030164630152285099, 5.9430509281810373e-05, 0.00021316143102012575, 0.00014343498332891613, 0.00012704796972684562, 0.00022857432486489415, 0.00012739503290504217, 0.00018969282973557711, 0.0001961655798368156, 0.00023755981237627566, 0.00010999039659509435, 0.00028968960396014154, 9.773793863132596e-05, 0.00016009373939596117, 0.00011375042231520638, 0.00013220762775745243, 0.00027009675977751613, 0.00011116612586192787, 4.1252300434280187e-05, 0.00025517385802231729, 0.00024604680947959423, 0.00014323591312859207, 0.00019753986271098256, 0.00013649117317982018, 0.00017447523714508861, 9.7731441201176494e-05, 7.7515745942946523e-05, 0.00017977671814151108, 0.00010158695658901706, 7.1109163400251418e-05, 0.00013014528667554259, 9.2947229859419167e-05, 0.00019370536028873175, 0.00015892655937932432, 0.00019967656407970935, 0.00031255974317900836, 0.00018780760001391172, 0.00026595618692226708, 4.830638863495551e-05, 0.00015562374028377235, 0.00010581193782854825, 0.0001710652286419645, 0.00012790976325049996, 0.00013545213732868433, 3.131262565148063e-05, 0.00024248359841294587, 0.00013046144158579409, 0.00013839399616699666, 0.00019356711709406227, 0.00025848121731542051, 0.00019993686873931438, 0.00015077920397743583, 0.00012627143587451428, 0.00016659902757965028, 0.00016507449618075043, 0.00013726497127208859, 0.00018369851750321686, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 47,-11,11,61,-49,-37,49,35,77,127,3,66,-51,5,2,25, 
  /* [1][0][][] */ -29,-10,-88,51,127,81,-12,28,-33,53,-27,72,-101,59,-37,-62, 
  /* [2][0][][] */ -57,30,101,-10,75,120,34,59,41,-48,18,-60,109,-127,-7,70, 
  /* [3][0][][] */ 127,-42,14,11,-21,89,-14,35,-25,4,-66,-84,-27,38,-69,79, 
  /* [4][0][][] */ -127,-4,-73,-30,-102,13,-112,-29,13,37,-10,-30,-28,36,-27,94, 
  /* [5][0][][] */ -65,-38,-7,24,127,27,17,53,-58,-2,-24,-2,-22,72,-53,25, 
  /* [6][0][][] */ -127,31,-4,28,9,-65,39,9,-6,3,-24,64,-12,18,-60,-1, 
  /* [7][0][][] */ 8,90,44,-91,-2,70,127,35,16,-41,3,-8,96,-15,23,44, 
  /* [8][0][][] */ 5,-31,-69,40,-20,36,-49,-39,23,2,49,26,127,75,-42,11, 
  /* [9][0][][] */ -81,-126,-93,119,-72,-37,-56,127,44,36,-13,111,-126,30,25,-16, 
  /* [10][0][][] */ -57,-20,-65,63,-127,93,31,-43,-31,-27,82,2,20,108,-67,28, 
  /* [11][0][][] */ -7,-45,-19,8,-35,21,71,1,-35,-8,53,-46,33,86,-18,127, 
  /* [12][0][][] */ -33,-114,-45,32,-73,-98,-1,23,105,67,-13,127,-25,-27,-64,-42, 
  /* [13][0][][] */ -64,-35,-20,-10,10,2,9,2,9,127,-19,-14,2,15,14,-22, 
  /* [14][0][][] */ -82,31,-127,-126,-33,114,32,-110,108,-62,16,-9,74,-19,-84,-62, 
  /* [15][0][][] */ -43,-127,94,-74,-68,-20,28,67,-14,-61,-66,-60,91,-29,-31,-20, 
  /* [16][0][][] */ -46,-47,26,-8,37,29,-66,4,42,-127,73,13,-40,-6,-82,-110, 
  /* [17][0][][] */ -20,29,18,-33,13,-14,-24,2,43,-51,59,127,73,-9,-52,-110, 
  /* [18][0][][] */ 30,-24,-16,-127,9,-13,101,-7,12,82,-19,56,-2,121,-24,-112, 
  /* [19][0][][] */ -36,-103,-127,-115,-47,80,1,-62,-45,-74,-43,-126,40,21,7,9, 
  /* [20][0][][] */ -6,113,49,-94,70,-12,-35,63,-85,-64,23,-60,-43,127,-35,-49, 
  /* [21][0][][] */ -9,-44,-103,-40,-13,13,35,41,-66,-50,10,-10,127,-123,56,45, 
  /* [22][0][][] */ 41,-9,127,-9,13,-16,65,20,18,114,49,-10,-28,1,92,-15, 
  /* [23][0][][] */ -127,-58,-63,47,75,48,-34,49,27,5,-35,-12,-8,36,32,98, 
  /* [24][0][][] */ 20,-16,-18,3,63,-83,15,-6,36,127,-86,29,-67,-57,31,-42, 
  /* [25][0][][] */ 127,-125,103,76,66,-4,-58,45,-35,58,23,-19,9,17,9,-22, 
  /* [26][0][][] */ -19,38,5,32,-44,105,-13,45,-42,-39,-74,53,15,32,27,-127, 
  /* [27][0][][] */ 34,-11,-15,-23,-10,-15,-62,14,-88,-17,-75,-16,-51,43,11,127, 
  /* [28][0][][] */ -127,21,9,-15,40,22,-103,55,-12,-27,8,46,-44,-28,-69,-42, 
  /* [29][0][][] */ -30,-127,3,87,-24,-19,85,21,41,47,-74,28,12,-13,-30,40, 
  /* [30][0][][] */ 66,-44,-39,13,-127,-8,-2,-1,20,3,3,-5,-6,2,49,48, 
  /* [31][0][][] */ -127,8,25,71,-59,-20,-81,-24,-28,-41,28,-31,-18,-104,15,58, 
  /* [32][0][][] */ -127,-47,-91,17,-94,-28,-8,-34,72,71,-7,-16,10,67,73,-1, 
  /* [33][0][][] */ -23,0,-60,6,-105,-64,48,-20,-114,27,-98,-92,-13,127,-14,9, 
  /* [34][0][][] */ 6,62,-3,57,-32,-67,-35,109,69,-71,26,35,-97,-30,127,92, 
  /* [35][0][][] */ 42,-10,3,-4,-127,-9,35,19,-8,15,-36,0,28,22,51,1, 
  /* [36][0][][] */ 29,28,-56,35,96,45,94,122,-60,7,-84,-127,-3,-11,-1,3, 
  /* [37][0][][] */ -127,22,9,-66,55,-117,-9,-61,-18,-31,-12,60,105,-47,-32,-114, 
  /* [38][0][][] */ 53,69,31,-34,-96,-66,-122,-101,-73,-56,36,74,-63,-50,127,-34, 
  /* [39][0][][] */ -21,-1,34,36,-7,38,53,-32,1,13,-16,9,3,127,33,60, 
  /* [40][0][][] */ 109,30,127,92,-125,-56,52,19,-48,20,-3,-40,-13,-21,94,-4, 
  /* [41][0][][] */ -20,21,-55,51,-68,127,-18,51,-55,9,-93,-9,-2,-7,70,-81, 
  /* [42][0][][] */ 124,-127,-5,-39,81,10,86,-16,-28,-127,-97,-66,-13,47,26,19, 
  /* [43][0][][] */ 30,-55,-35,-3,50,-18,21,59,-53,-62,-57,-92,127,-98,7,95, 
  /* [44][0][][] */ -97,-51,-12,-59,-14,60,7,19,-25,-127,-65,63,-72,52,68,94, 
  /* [45][0][][] */ 11,-10,-48,-3,-127,28,3,-53,37,-35,64,-30,-12,-31,-21,35, 
  /* [46][0][][] */ 58,-84,8,14,12,-47,-9,88,42,-47,25,56,-25,-67,86,-127, 
  /* [47][0][][] */ -34,-38,3,34,45,-24,7,91,51,127,24,52,-42,36,6,73, 
  /* [48][0][][] */ 57,32,-127,-59,7,-67,46,83,33,-106,30,24,-49,39,-37,-76, 
  /* [49][0][][] */ 51,59,42,46,-69,-2,72,127,-8,85,12,-33,-54,-100,127,66, 
  /* [50][0][][] */ -12,11,10,-6,-127,-16,-15,-51,54,13,23,73,-7,-49,14,-1, 
  /* [51][0][][] */ 27,-39,-116,-125,14,122,-15,-35,-45,36,7,-48,127,107,-27,33, 
  /* [52][0][][] */ -14,-13,58,-93,102,-127,-30,-18,47,45,91,-49,-22,-6,-51,35, 
  /* [53][0][][] */ -48,-71,64,-38,-7,-118,15,-47,-11,127,-66,85,-62,5,28,-62, 
  /* [54][0][][] */ 127,70,-68,16,-93,-46,-82,-63,-9,-15,124,42,-65,-104,-4,33, 
  /* [55][0][][] */ 61,0,-89,87,-35,30,50,2,31,127,15,14,-30,-17,11,41, 
  /* [56][0][][] */ -21,-107,-86,84,-117,57,-54,127,34,24,105,49,-74,-13,8,96, 
  /* [57][0][][] */ 63,-8,64,-62,115,-11,-68,-47,80,-42,-22,127,65,-47,87,-75, 
  /* [58][0][][] */ 61,-16,-60,-53,3,51,4,127,52,40,19,51,24,7,49,-9, 
  /* [59][0][][] */ -10,50,-1,-49,-28,-33,29,0,28,-3,-94,-107,-127,-46,78,-35, 
  /* [60][0][][] */ 45,-13,17,-5,16,-43,-11,-70,71,127,-34,87,-40,-43,7,-64, 
  /* [61][0][][] */ 69,38,11,-13,-23,-127,-14,-44,-42,7,-22,-27,-64,-51,47,35, 
  /* [62][0][][] */ -52,59,6,17,-6,127,-83,-2,-48,80,-93,30,-60,40,30,-117, 
  /* [63][0][][] */ 44,-100,-33,-52,25,-50,101,29,-11,-127,-90,0,-38,73,81,-28, 
  /* [64][0][][] */ -38,12,58,4,71,-79,27,50,-127,-6,-107,-19,-2,107,51,37, 
  /* [65][0][][] */ -38,-29,10,-33,58,25,-62,-73,-127,48,-10,20,-61,78,-61,-30, 
  /* [66][0][][] */ -11,51,22,36,-62,127,-35,40,-97,21,-67,42,-47,19,48,-118, 
  /* [67][0][][] */ -15,-10,-16,-2,39,-62,79,-127,-55,52,-20,122,-79,30,-9,-101, 
  /* [68][0][][] */ 1,-113,39,51,-103,-40,72,127,105,4,69,-33,-122,-34,35,-24, 
  /* [69][0][][] */ -3,-14,45,-64,35,-30,-62,27,25,117,21,85,-21,-2,-4,-127, 
  /* [70][0][][] */ -2,2,81,-36,127,-55,-89,-74,-112,-79,7,15,-61,95,-115,-17, 
  /* [71][0][][] */ -53,-47,-34,-83,-3,-47,13,22,-104,74,-54,-48,30,106,80,127, 
  /* [72][0][][] */ -52,34,72,-49,-89,-13,-39,-86,-25,31,14,6,46,44,-127,-8, 
  /* [73][0][][] */ -10,-10,5,-6,34,-85,31,-24,86,70,127,-15,20,-47,-52,110, 
  /* [74][0][][] */ 30,25,-16,70,-57,-31,105,21,76,56,17,127,94,51,-53,-6, 
  /* [75][0][][] */ -42,40,9,26,-60,127,8,33,-35,35,-44,26,-29,63,48,-58, 
  /* [76][0][][] */ -75,95,-36,17,-63,-28,-41,-25,40,72,-17,7,41,-13,-127,7, 
  /* [77][0][][] */ 79,104,-98,107,-4,40,28,81,17,-54,80,-40,6,-27,127,38, 
  /* [78][0][][] */ -4,-13,17,-60,35,-100,22,-13,5,53,127,-42,7,-76,-14,97, 
  /* [79][0][][] */ -106,76,-32,38,-42,-47,-59,-18,-127,-44,50,8,84,71,-39,-29, 
  /* [80][0][][] */ -83,43,116,-4,11,93,54,-127,-105,-3,-36,-44,29,-96,4,61, 
  /* [81][0][][] */ 90,77,-59,-5,18,-39,73,103,-82,127,-40,-37,-35,64,64,75, 
  /* [82][0][][] */ 56,105,-50,-57,4,-64,106,-127,25,21,-39,103,111,25,15,-52, 
  /* [83][0][][] */ -38,8,40,-8,-18,12,-50,-127,37,1,90,-1,20,-66,-50,-125, 
  /* [84][0][][] */ -55,-29,-62,12,-29,127,79,23,113,3,65,39,48,66,-104,31, 
  /* [85][0][][] */ 61,-20,54,-66,96,5,-4,127,41,127,-39,34,-59,47,88,1, 
  /* [86][0][][] */ -123,101,-49,-7,34,106,25,23,127,21,80,-56,-46,69,10,3, 
  /* [87][0][][] */ 12,-64,24,-36,58,-127,19,-38,36,-13,55,-38,50,-43,-56,75, 
  /* [88][0][][] */ -93,67,61,22,91,-4,7,48,-79,-79,87,-86,62,127,57,-80, 
  /* [89][0][][] */ -53,41,-22,23,-15,127,-39,68,-66,60,-45,-23,-39,15,21,-105, 
  /* [90][0][][] */ 96,-68,27,78,125,30,-18,30,47,-127,-89,-14,-24,-65,-68,19, 
  /* [91][0][][] */ -7,41,-17,-29,-14,-88,-54,44,-22,15,3,-127,-107,-121,-15,46, 
  /* [92][0][][] */ 28,44,30,12,-127,-26,39,23,-28,-20,17,-34,-6,-75,21,13, 
  /* [93][0][][] */ -16,-76,-53,45,41,-25,32,47,100,55,9,99,-93,127,-17,-11, 
  /* [94][0][][] */ 73,-34,127,-44,44,-64,3,7,16,95,0,99,42,50,58,-44, 
  /* [95][0][][] */ -89,-19,-19,-29,127,-14,9,35,-30,11,-109,-39,12,22,-79,5, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0047909831628203392, 0.001429165480658412, 0.0028151783626526594, 0.0028844980988651514, 0.0025671538896858692, 0.00110134098213166, 0.0045947376638650894, 0.0020504246931523085, 0.0016880088951438665, 0.002554641105234623, 0.0019556956831365824, 0.0024202596396207809, 0.0030951390508562326, 0.0053671109490096569, 0.0024113995023071766, 0.0022201768588274717, 0.0025625326670706272, 0.0027618957683444023, 0.0027969656512141228, 0.001489942311309278, 0.0044666170142591, 0.0017316155135631561, 0.0034570882562547922, 0.0039634821005165577, 0.001504391897469759, 0.0029912055470049381, 0.0028312881477177143, 0.0049786879681050777, 0.0019970338325947523, 0.0043315025977790356, 0.002747486112639308, 0.0034869271330535412, 0.0036071557551622391, 0.0018339501693844795, 0.0018034066306427121, 0.0032899572979658842, 0.0020986534655094147, 0.0027972972020506859, 0.0033478436525911093, 0.0050836666487157345, 0.0010015865555033088, 0.0035924245603382587, 0.0024173199199140072, 0.002141148317605257, 0.0038521792739629745, 0.0021469974890351295, 0.0031969067640602589, 0.0033059923443943262, 0.0040036123245954514, 0.0018536759307608008, 0.0048821591772139072, 0.001647184370085597, 0.0026980710681527853, 0.0019170439336448908, 0.0022281045094132423, 0.0045519596897065639, 0.0018734905170276761, 0.0006952279363758862, 0.0043004630133509636, 0.0041466443799436092, 0.0024139650631695986, 0.0033291531726717949, 0.0023002952802926302, 0.0029404435772448778, 0.0016470748232677579, 0.0013063782826066017, 0.0030297897756099701, 0.0017120521515607834, 0.0011984077282249928, 0.0021933477837592363, 0.0015664462698623538, 0.0032645300962030888, 0.0026784006040543318, 0.0033651632256805897, 0.0052675912156701088, 0.0031651346944272518, 0.00448217848315835, 0.00081411097198724747, 0.0026227377820760012, 0.0017832560697570443, 0.0028829744551330805, 0.0021556722931563854, 0.0022827843204140663, 0.00052771391347050667, 0.0040865931659936905, 0.0021986758802086115, 0.0023323637433350086, 0.0032622003927826881, 0.0043562022037804127, 0.0033695502206683159, 0.0025410926900804043, 0.0021280613727867603, 0.0028077051974833012, 0.002782012103125453, 0.0023133363574743271, 0.003095884108915925, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -6021, 13650, -16675, 8668, 12158, -14183, -36800, -12945, -4766, 9099, -14032, -12172, 8415, -3695, -2513, -1345, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014854263281449676, 0.00012694917677436024, 0.00014605621981900185, 0.00011627880303421989, 8.5526640759781003e-05, 0.00011746443487936631, 9.0376015577930957e-05, 0.00013483890506904572, 7.7740151027683169e-05, 9.3594171630684286e-05, 0.00015638433978892863, 0.00012055474508088082, 9.5024442998692393e-05, 8.4434301243163645e-05, 8.3349797932896763e-05, 0.00010732618829933926, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 7,36,19,-32,72,51,-27,46,-16,119,6,60,-45,47,-19,53,27,79,49,-60,-72,62,-20,22,54,52,47,64,-28,-65,0,81,-15,0,-86,28,23,-127,-26,6,22,-45,61,4,9,-40,-76,-17, 
  /* [1][0][][] */ -49,-6,-97,-66,11,104,-58,4,-21,-15,-53,21,38,-27,-24,-29,-29,-40,-26,37,-67,47,-108,-39,-61,-39,32,80,-9,-12,41,-37,2,-50,-44,55,26,-53,127,-61,-21,16,-39,-30,24,63,35,2, 
  /* [2][0][][] */ -2,-3,73,-18,-44,-112,-4,10,64,64,-42,16,127,-89,117,90,-70,5,-35,31,63,-109,-45,-109,-11,-48,43,-81,67,49,-8,-9,37,-59,56,31,-74,19,-7,-42,36,43,75,-24,-19,-70,115,-39, 
  /* [3][0][][] */ 39,0,-50,-24,36,111,3,-24,79,-54,18,-47,-69,17,-6,37,-57,-73,19,-127,-14,23,-16,-23,-37,90,122,66,-11,-41,27,40,48,-41,98,31,-74,-46,-9,40,24,27,-41,10,34,11,-18,-28, 
  /* [4][0][][] */ 97,-21,51,-54,118,92,80,30,53,-18,-106,39,36,9,46,10,-127,-117,20,-99,-24,-1,-37,1,-78,121,-100,115,-47,-76,20,64,36,-77,4,-45,0,-14,-28,68,-51,5,19,47,-24,87,-46,-70, 
  /* [5][0][][] */ -10,-7,-71,8,-29,64,20,2,61,50,24,87,50,-28,29,-5,-40,127,-18,37,4,9,-61,10,32,-1,-83,-55,-20,32,21,-21,-49,13,59,-5,-29,17,-82,13,112,-12,29,37,-20,4,-53,24, 
  /* [6][0][][] */ 8,11,23,45,-10,-25,97,-37,2,84,122,127,31,47,-34,40,24,-36,-44,97,35,-76,-21,40,-73,89,86,-10,100,32,-22,-38,63,-22,-78,-29,57,4,15,6,8,49,48,-10,91,89,28,-12, 
  /* [7][0][][] */ -85,-17,-38,37,-55,-54,15,57,77,108,-25,-38,-108,-9,-58,-10,-58,109,-22,124,-45,49,27,43,3,-71,-24,-87,52,54,7,1,-25,0,34,-20,7,-46,127,41,7,41,15,-7,56,43,-32,27, 
  /* [8][0][][] */ -36,-69,74,-74,71,-48,70,-39,-23,-114,26,11,-25,24,24,33,-15,13,-37,92,-4,34,-20,20,68,-7,-50,-38,-127,-58,-44,-111,19,-93,-7,82,-43,39,108,57,26,-3,81,119,-1,-73,-20,98, 
  /* [9][0][][] */ 58,-65,18,-51,29,63,-36,37,17,-14,-32,-10,-12,-30,102,-17,-4,-119,17,68,-66,19,46,-22,-18,-66,-23,65,58,97,-29,-48,-79,50,-3,127,-25,-56,-58,-21,-29,-31,15,99,57,66,-71,-5, 
  /* [10][0][][] */ -7,17,-15,2,20,26,-80,-37,43,30,69,-19,-25,-11,45,-50,-66,127,-6,57,7,-7,11,38,-39,23,4,100,47,13,-20,-32,81,18,-1,25,-7,-46,-51,17,-90,-8,9,-20,11,29,25,38, 
  /* [11][0][][] */ -23,42,-7,32,36,67,13,11,15,6,-127,-83,57,47,8,-23,-10,29,-46,-64,-3,-13,114,28,56,3,-13,34,-27,3,-13,48,23,-15,-55,9,39,71,98,32,48,-21,58,3,-31,-26,91,-6, 
  /* [12][0][][] */ -90,-7,15,24,-68,-39,-6,5,-57,-34,-109,24,78,-74,25,15,34,90,85,-127,-26,33,-61,-71,-6,-18,18,-27,7,27,9,69,50,84,28,-33,-61,-8,30,22,-36,9,46,-11,32,-13,-45,-14, 
  /* [13][0][][] */ -23,-119,-61,-127,-21,57,59,44,-94,26,99,-66,47,55,119,-9,85,2,11,-69,91,-122,106,13,-74,-6,-31,-3,1,-59,-121,13,1,-3,-75,53,59,-50,81,-78,-15,76,28,44,50,-17,86,-87, 
  /* [14][0][][] */ 58,32,-85,19,-48,6,-90,-19,-63,85,71,79,-48,-70,-6,-42,64,-121,3,18,90,-66,6,-5,3,127,-72,5,-68,-18,-69,12,124,39,76,-32,-103,0,-19,47,-19,-51,114,-52,-33,-39,-48,54, 
  /* [15][0][][] */ -77,-10,42,38,87,-10,-5,23,15,75,-9,62,35,-15,-38,-29,17,30,9,-34,24,-24,-60,-47,63,-61,-40,68,-25,24,27,8,-45,4,127,-15,-101,2,54,-8,-67,-15,11,-24,-30,-35,-34,8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0063130618073046207, 0.0053953398019075394, 0.0062073892913758755, 0.0049418490380048752, 0.0036348821595311165, 0.0049922382459044456, 0.0038409805856645107, 0.0057306536473333836, 0.0033039562404155731, 0.0039777522906661034, 0.0066463341936469078, 0.0051235766150057316, 0.004038538783788681, 0.0035884575918316841, 0.0035423664376139641, 0.0045613627880811691, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 11631, 1418, 16958, 828, 11197, -921, 33387, 1234, 7780, 43973, 5120, 26611, 1755, 11223, 32753, 20242, -585, 1550, 3992, 41599, 4245, 15393, 1132, 15817, 13685, 36996, 3629, 423, -9113, 9562, 15358, -257, 1391, 1141, -360, 7708, 8403, 29455, 2131, 14051, 24038, 8585, 324, 12660, -1172, 298, 30010, 17801, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.5230025181081146e-05, 0.00016342158778570592, 8.8033884821925312e-05, 0.00013749938807450235, 0.00012496094859670848, 0.00015898417041171342, 5.684947973350063e-05, 0.00021501342416740954, 9.6550917078275234e-05, 4.9036680138669908e-05, 5.8594137954059988e-05, 0.00010438761091791093, 7.6410040492191911e-05, 0.00010248429316561669, 4.4794043787987903e-05, 0.00010599382221698761, 0.00010787604696815833, 6.5282525611110032e-05, 0.00014532910427078605, 5.4659038141835481e-05, 4.9641948862699792e-05, 7.7694399806205183e-05, 9.6608404419384897e-05, 7.1771348302718252e-05, 0.00010530240251682699, 5.5864460591692477e-05, 4.7078123316168785e-05, 0.00010273769294144586, 0.00022373793763108552, 0.00017528889293316752, 5.4039137467043474e-05, 0.00025066232774406672, 0.00012574561696965247, 0.00020684704941231757, 0.00011711274419212714, 0.00011559454287635162, 0.0001235582894878462, 4.6413228119490668e-05, 8.1457386841066182e-05, 0.00014573476801160723, 6.6953529312741011e-05, 0.00017679357551969588, 0.00032864985405467451, 5.6762928579701111e-05, 0.00014172626833897084, 8.4764054918196052e-05, 6.378702528309077e-05, 9.9560500530060381e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -110,32,-103,50,-102,110,-93,53,-57,-70,81,-72,13,-100,-58,-56,91,58,38,-109,86,-127,108,-46,-6,-52,60,35,-103,-11,-102,127,-10,-80,45,-61,-4,-106,106,-27,-4,-102,73,-106,72,53,-63,-33, -108,53,-19,42,-55,23,-62,99,-81,-75,127,-67,26,-92,-25,-127,43,88,127,-90,127,-76,127,-58,1,-65,107,127,58,-75,-58,61,63,-127,87,-127,-17,-127,83,30,-59,58,127,-89,-41,71,-45,-32, -71,66,12,47,8,43,-15,-32,-41,-51,39,-9,30,-80,-22,-45,67,57,67,-71,49,-48,44,-15,-57,-21,51,62,127,-78,-19,96,-12,-46,16,-27,20,17,65,60,-89,-24,67,-126,-14,33,-55,-5, 
  /* [0][1][][] */ -127,85,-127,127,-39,127,-127,127,-127,-127,86,-127,97,-53,-101,-21,88,90,-76,-95,113,-26,123,-125,-124,-102,127,60,-86,-23,-86,68,91,25,76,-22,-127,-90,100,-68,-76,-127,115,-96,127,90,-86,-59, -19,127,-60,80,-127,85,-112,122,-99,-124,123,-120,127,-111,-127,-21,127,127,-92,-127,122,-25,121,-77,-89,-127,102,116,55,-71,-127,67,127,32,127,-29,-66,-100,127,-94,-127,125,49,-49,-50,127,-127,-127, -45,-3,-66,77,-107,7,-23,-13,-69,-14,11,-46,73,-45,-62,27,109,56,-71,-15,39,-82,51,-75,-127,-43,17,54,102,-9,-34,60,77,-14,83,-4,-85,-96,48,-57,-31,-61,3,-127,-70,47,-52,-91, 
  /* [0][2][][] */ -23,24,-45,36,1,73,-118,-64,-55,-80,36,-40,12,-127,-74,-58,87,46,-21,-41,35,-1,-25,-116,-54,-51,65,16,-65,-70,-11,-33,59,80,76,-71,-104,-41,39,-57,-104,-73,-3,-73,75,8,-48,-22, -64,90,-69,18,17,35,-48,-30,-23,-24,13,-88,84,-125,-40,-93,76,64,-44,-66,26,-104,31,-127,-49,-49,61,8,31,-127,-75,8,74,67,86,-30,-59,-74,22,-127,-86,10,-18,-116,-48,12,-13,-64, -27,-11,-96,41,-62,10,-53,-88,-1,-26,19,-46,45,-36,-8,-13,35,63,-29,-29,38,-54,84,-108,-40,-41,19,4,81,-42,-45,-70,20,70,57,24,-57,-12,-17,-62,-26,-63,15,-38,-57,22,-11,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0040472759865224361, 0.0069454172626137733, 0.0037414401303976774, 0.0058437241241335869, 0.0053108399733901024, 0.0067568272352218628, 0.0024161029141396284, 0.0091380700469017029, 0.0041034137830138206, 0.0020840589422732592, 0.0024902508594095707, 0.0044364733621478081, 0.0032474265899509192, 0.0043555824086070061, 0.0019037468591704965, 0.0045047374442219734, 0.004584731999784708, 0.0027745072729885578, 0.0061764870770275593, 0.0023230090737342834, 0.0021097827702760696, 0.0033020118717104197, 0.0041058571077883244, 0.0030502821318805218, 0.0044753518886864185, 0.0023742394987493753, 0.0020008201245218515, 0.0043663517571985722, 0.0095088621601462364, 0.0074497777968645096, 0.0022966633550822735, 0.010653149336576462, 0.0053441887721419334, 0.0087909996509552002, 0.0049772914499044418, 0.0049127680249512196, 0.0052512269467115402, 0.0019725621677935123, 0.0034619388170540333, 0.006193727720528841, 0.0028455250430852175, 0.0075137270614504814, 0.013967618346214294, 0.0024124244228005409, 0.0060233664698898792, 0.0036024721339344978, 0.0027109484653919935, 0.0042313211597502232, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1063, -2843, 647, -3017, 2819, -2153, 3451, -4814, 143, 1172, 1671, 5144, 273, -1138, 4, 6209, -2524, 3139, 7323, 397, -892, 1183, -1223, 5302, 2874, 3002, 572, -1869, 10511, -786, 1909, -1349, -1061, 5153, -926, 1604, 1436, 99, 219, 9590, 969, 10552, -5315, 1036, 5365, 1306, 1764, 5904, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0002665105857886374, 0.00015832140343263745, 0.00026970263570547104, 0.00015676354814786464, 0.00023665407206863165, 0.0001479378406656906, 0.00017589962226338685, 0.00013419424067251384, 0.0002638278529047966, 0.00022643945703748614, 0.00022264158178586513, 0.00015290865849237889, 0.00033287110272794962, 0.00026678419089876115, 0.00024987920187413692, 0.00013279471022542566, 0.00022178953804541379, 0.00023185924510471523, 0.00012031805817969143, 0.00025400472804903984, 0.00025931678828783333, 0.00028491599368862808, 0.00018004387675318867, 0.00015351655019912869, 0.00016476589371450245, 0.00017501496768090874, 0.00024730569566600025, 0.00019152402819599956, 8.773278386797756e-05, 0.00018886796897277236, 0.00020189437782391906, 0.00016937698819674551, 0.00019509486446622759, 0.00014998587721493095, 0.00023098191013559699, 0.00022818289289716631, 0.00025821293820627034, 0.00034461621544323862, 0.00024419408873654902, 9.9769487860612571e-05, 0.00034019214217551053, 9.2996466264594346e-05, 0.00010900513007072732, 0.00027485622558742762, 0.00014189851935952902, 0.00014579616254195571, 0.00028069294057786465, 0.00012370952754281461, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 52,24,127,-23,59,63,-44,-45, 
  /* [1][0][][] */ -6,-109,-127,-1,57,-12,56,-24, 
  /* [2][0][][] */ -127,5,-23,-23,33,17,-98,-40, 
  /* [3][0][][] */ 52,88,127,-57,-31,-92,-6,16, 
  /* [4][0][][] */ -127,9,-57,-14,42,44,-43,-63, 
  /* [5][0][][] */ -127,23,-46,2,36,21,-88,-96, 
  /* [6][0][][] */ -24,-127,-101,42,75,-25,17,58, 
  /* [7][0][][] */ -44,-127,-62,-87,-58,-77,25,55, 
  /* [8][0][][] */ 98,33,-11,-10,114,-59,-127,-9, 
  /* [9][0][][] */ -19,73,-63,74,-82,-7,127,-24, 
  /* [10][0][][] */ -36,87,28,40,127,-28,2,42, 
  /* [11][0][][] */ -54,-37,-40,-21,-64,84,127,-6, 
  /* [12][0][][] */ 51,26,-127,19,1,-24,-64,-12, 
  /* [13][0][][] */ 71,-32,-53,23,30,-127,-29,-10, 
  /* [14][0][][] */ -8,-69,58,28,127,-50,-49,0, 
  /* [15][0][][] */ -26,-42,-12,127,52,99,-88,45, 
  /* [16][0][][] */ 95,0,-24,18,68,-70,-127,-5, 
  /* [17][0][][] */ 56,127,57,95,52,47,34,-87, 
  /* [18][0][][] */ 40,-47,13,-2,127,7,54,6, 
  /* [19][0][][] */ 11,127,12,2,-118,4,20,12, 
  /* [20][0][][] */ -51,46,49,-127,12,35,10,117, 
  /* [21][0][][] */ -48,67,3,-127,14,53,-6,103, 
  /* [22][0][][] */ -59,-44,-81,8,-100,127,75,-14, 
  /* [23][0][][] */ 100,40,-127,27,12,-61,-71,-14, 
  /* [24][0][][] */ -63,73,23,1,-47,80,-117,127, 
  /* [25][0][][] */ -99,-55,-127,38,-46,-65,67,90, 
  /* [26][0][][] */ 29,-14,-12,-31,127,-20,105,-42, 
  /* [27][0][][] */ 122,-84,50,105,5,11,-21,127, 
  /* [28][0][][] */ 49,65,-15,-13,127,-90,72,-13, 
  /* [29][0][][] */ 9,-16,-67,-53,-105,11,127,-72, 
  /* [30][0][][] */ 28,-127,-49,-71,-104,24,-1,-18, 
  /* [31][0][][] */ 16,40,1,-3,-127,-11,-35,10, 
  /* [32][0][][] */ 25,-64,-47,71,12,-62,127,-90, 
  /* [33][0][][] */ 56,127,51,1,21,-65,-49,-46, 
  /* [34][0][][] */ -127,-48,122,27,-21,98,86,14, 
  /* [35][0][][] */ -25,68,127,-11,-73,-68,-19,3, 
  /* [36][0][][] */ -83,4,127,-25,-30,97,77,24, 
  /* [37][0][][] */ -23,-72,8,-127,-32,-61,40,34, 
  /* [38][0][][] */ 40,-7,56,-34,60,59,-127,3, 
  /* [39][0][][] */ -13,127,-87,-70,-53,-46,-20,70, 
  /* [40][0][][] */ 80,-28,20,39,6,-14,-12,127, 
  /* [41][0][][] */ -63,66,75,32,-28,127,-46,16, 
  /* [42][0][][] */ 54,-127,-121,-30,-105,-15,70,-117, 
  /* [43][0][][] */ 14,-52,3,-18,127,-27,19,22, 
  /* [44][0][][] */ -37,127,54,3,45,11,-59,-19, 
  /* [45][0][][] */ -49,37,21,86,-108,72,-127,13, 
  /* [46][0][][] */ -25,-23,65,30,-98,-127,-38,-5, 
  /* [47][0][][] */ -49,93,-4,-120,-127,43,-70,71, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0033182757906615734, 0.0019712315406650305, 0.0033580195158720016, 0.0019518348854035139, 0.0029465376865118742, 0.0018419476691633463, 0.0021900949068367481, 0.0016708285547792912, 0.0032848736736923456, 0.0028193572070449591, 0.0027720707003027201, 0.0019038383616134524, 0.0041445186361670494, 0.0033216823358088732, 0.0031112013384699821, 0.0016534032765775919, 0.0027614620048552752, 0.0028868380468338728, 0.0014980586711317301, 0.0031625675037503242, 0.003228707006201148, 0.0035474381875246763, 0.0022416941355913877, 0.0019114071037620306, 0.0020514708012342453, 0.0021790801547467709, 0.003079158952459693, 0.0023846314288675785, 0.0010923452209681273, 0.0023515613283962011, 0.0025137509219348431, 0.0021088826470077038, 0.0024290913715958595, 0.0018674473976716399, 0.0028759145643562078, 0.0028410644736140966, 0.0032149632461369038, 0.0042907549068331718, 0.0030404170975089073, 0.0012422121362760663, 0.0042356718331575394, 0.0011578823905438185, 0.0013572034658864141, 0.0034221860114485025, 0.0017667531501501799, 0.0018152820412069559, 0.0034948578104376793, 0.0015402853023260832, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -8253, -1553, 19301, 3655, 347, -10143, 4637, -12252, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.9094348873477429e-05, 0.00012568724923767149, 0.00014175885007716715, 9.5522671472281218e-05, 0.00010737966658780351, 0.00013108723214827478, 0.00011155111133120954, 8.8763634266797453e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -6,-27,-18,-72,-15,9,113,112,-77,-99,-53,23,-38,-13,-65,67,-97,13,-2,127,64,14,7,122,87,100,50,-1,-96,-32,-84,-66,-46,96,54,-65,73,-31,95,1,55,-10,12,-81,58,-23,-33,-62, 
  /* [1][0][][] */ 1,52,-24,-23,-54,51,-14,-14,-15,59,-16,14,47,58,-41,0,-18,-91,61,-30,127,22,-49,21,40,-14,-65,58,49,-4,43,30,-13,-5,-2,12,-15,76,-23,-8,63,44,-13,9,69,8,-41,72, 
  /* [2][0][][] */ -28,-17,102,27,76,-47,-8,38,-27,-17,-7,59,25,-18,-29,-127,-33,-90,-48,34,-97,18,-15,-56,-53,2,-17,-40,-18,11,-26,-6,-1,-5,25,1,19,-35,-38,1,54,-42,19,-23,-29,-55,-48,-61, 
  /* [3][0][][] */ 64,24,63,5,24,-52,24,63,-55,-21,100,-26,-74,39,-40,4,42,45,-84,36,-120,-64,116,1,23,-43,-73,-51,-99,92,69,-63,25,-104,-33,47,-18,-94,-15,106,-127,-54,45,-31,-95,-91,76,-31, 
  /* [4][0][][] */ 19,-8,55,-17,20,-14,7,2,-49,-4,-12,16,34,-89,15,-74,62,56,-16,-41,0,36,17,9,2,-7,66,-30,42,43,-127,-13,-7,-16,4,39,39,-8,39,12,-49,-18,-63,53,-11,-101,17,23, 
  /* [5][0][][] */ 13,-39,49,26,17,14,-10,-9,-73,-9,-28,13,15,25,15,-58,60,60,-11,-16,68,-71,127,-89,-30,50,-23,39,5,15,-35,-34,-16,-41,-31,38,18,25,54,3,-80,32,16,18,35,-5,71,-7, 
  /* [6][0][][] */ -27,32,-111,94,24,18,7,3,-9,-17,73,-74,-93,-3,-26,27,-127,21,-68,67,33,39,-78,-81,14,-4,39,48,-36,0,-45,16,39,59,-46,3,-11,-29,61,23,57,66,-104,-69,-25,87,-35,-58, 
  /* [7][0][][] */ 51,50,-80,-1,-14,78,102,68,29,85,-90,-20,-64,19,-70,-48,31,27,127,90,51,4,103,21,125,76,-53,75,-72,27,35,-50,6,-50,-1,-16,-50,94,-51,77,-55,47,1,-111,72,-16,54,-48, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.002936509670689702, 0.0053417081944644451, 0.0060247508808970451, 0.0040597133338451385, 0.0045636356808245182, 0.0055712070316076279, 0.0047409222461283207, 0.0037724543362855911, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1014, 11634, 570, 3248, 2703, 1039, 3632, 8083, -5454, -829, -9726, 74, -765, -533, -7621, 4959, 5751, 10288, 340, -7566, -8207, 330, 13488, -2460, -3583, -2219, 7110, -9707, -1445, -3921, -13183, 8668, 2605, -613, 4803, 434, 342, -982, 7596, 3618, 1730, -6988, 3903, 240, -908, 9928, -4379, -3663, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00023561999842058867, 6.7713874159380794e-05, 0.00070869165938347578, 0.0002108174521708861, 0.00017319213657174259, 0.00018206678214482963, 0.00019011403492186219, 0.00027737265918403864, 7.3701718065422028e-05, 0.00020615989342331886, 0.00014859590737614781, 0.0012925956398248672, 0.00039347310666926205, 0.0006296900101006031, 0.00018490650109015405, 0.00053385668434202671, 0.00021090672817081213, 5.3714669775217772e-05, 0.00026027133571915329, 0.00019324827007949352, 0.00020316103473305702, 0.00026017095660790801, 0.00010148762521566823, 0.00041682965820655227, 0.00024328335712198168, 0.00036222086055204272, 0.00043448942597024143, 0.00013357287389226258, 0.00020297078299336135, 0.00023778618196956813, 0.00011407062993384898, 0.00013131641026120633, 0.0001143492991104722, 0.00021543171897064894, 0.00011348632688168436, 0.00027678103651851416, 0.0010353581747040153, 0.0002697646850720048, 0.0001570214080857113, 0.00015670970606151968, 0.00040928774978965521, 8.4933184552937746e-05, 0.00023190965293906629, 0.00023328339739236981, 0.00017142726574093103, 9.7694195574149489e-05, 8.9475171989761293e-05, 0.00019164764671586454, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 14,-86,-8,-1,-33,-117,-39,20,-36,36,22,16,60,-18,18,-14,127,24,60,3,23,-18,-34,31,8,-9,3,-4,-76,80,7,-27,71,-10,-104,-65,6,-64,32,-13,-24,120,3,-3,-19,49,127,30, -127,-127,-22,127,-89,27,-101,100,17,25,20,15,74,-9,18,-61,-42,122,62,-4,0,127,26,127,127,-28,-53,48,79,-115,-1,0,62,-22,-92,-127,29,5,-35,-77,-108,22,-89,-97,48,31,76,127, -15,16,8,1,-54,3,30,22,-8,-51,23,3,-14,-22,17,-28,-86,68,-80,-11,0,-25,127,18,21,15,10,60,26,2,21,20,-32,1,-34,33,18,48,26,30,11,-36,18,-45,25,77,-3,-34, 
  /* [0][1][][] */ -6,-24,-33,-21,25,-127,106,-81,2,40,37,24,127,26,30,-14,-72,-111,64,74,127,-76,40,8,-53,127,-60,-5,127,-61,48,-127,-43,0,-94,-3,-9,-73,-27,1,127,127,-3,-127,-96,-67,-10,103, 97,-119,127,-21,127,22,-63,-53,49,127,127,-127,-96,127,127,127,125,111,80,127,104,114,-1,1,76,-93,-127,94,31,127,127,-30,-127,127,120,107,-127,127,-127,-117,58,72,-127,-11,127,-127,-20,72, 10,51,-39,-34,-49,90,-127,34,100,-92,33,53,-42,6,20,-59,27,-49,-127,27,19,-95,-42,-10,61,-6,-12,127,-77,-31,50,-47,-28,38,127,-25,17,56,-6,-127,101,9,19,79,-68,70,75,-82, 
  /* [0][2][][] */ 3,9,4,-35,-5,-65,-41,-20,13,17,18,10,-34,3,34,12,-79,-24,24,-3,6,-41,71,-20,-82,15,11,-18,28,36,15,-28,-8,-14,-27,23,-17,-40,15,62,-42,32,15,26,-23,11,1,49, 54,0,-36,-69,32,21,110,-127,127,-23,-5,-3,-79,2,7,-55,-33,127,-6,77,6,13,-21,-39,-32,55,21,-2,-83,56,4,-48,37,-3,-18,20,33,-32,-1,97,-107,31,-29,107,33,25,11,-104, -4,55,3,-44,-7,24,-6,-125,-11,-36,12,-2,9,-10,7,22,60,85,-43,-24,-9,-12,-34,-23,11,-11,8,-16,-12,32,41,-11,76,-6,-12,-47,-17,15,35,-18,-29,-11,12,54,-38,-7,49,-15, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.010013849474489689, 0.002877839608117938, 0.030119394883513451, 0.0089597413316369057, 0.0073606655932962894, 0.0077378381974995136, 0.0080798463895916939, 0.011788337491452694, 0.0031323230359703302, 0.008761795237660408, 0.006315325852483511, 0.054935313761234283, 0.016722606495022774, 0.026761824265122414, 0.0078585259616374969, 0.022688908502459526, 0.0089635355398058891, 0.0022828734945505857, 0.011061531491577625, 0.0082130515947937965, 0.0086343437433242798, 0.011057266034185886, 0.0043132239952683449, 0.01771526038646698, 0.010339542292058468, 0.015394385904073715, 0.018465800210833549, 0.0056768469512462616, 0.0086262580007314682, 0.010105912573635578, 0.0048480015248060226, 0.0055809472687542439, 0.0048598451539874077, 0.0091558480635285378, 0.0048231687396764755, 0.011763193644583225, 0.044002722948789597, 0.011464999057352543, 0.006673409603536129, 0.0066601624712347984, 0.01739472895860672, 0.0036096603143960238, 0.0098561597988009453, 0.0099145444110035896, 0.007285658735781908, 0.0041520032100379467, 0.0038026946131139994, 0.0081450249999761581, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3133, 2538, 13511, 2969, 1312, -525, 4551, 12761, 2698, -773, 2531, -1799, 24981, -2079, 2884, 22184, -594, 2872, 1543, 4703, 3900, 9706, 933, 9693, 5684, 4106, 12166, 2793, 2075, 4304, 811, 1075, 1305, 1979, -78, -109, -1991, -1053, 3517, 3503, 21020, 1115, 4278, 4739, 3190, 4400, 1981, 4415, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017724430654197931, 0.00021712778834626079, 7.2044014814309776e-05, 0.00017945998115465045, 0.00028420003945939243, 0.00025107755209319293, 0.0001690698554739356, 7.1303569711744785e-05, 0.00021132089023012668, 0.00024329086591023952, 0.00029661535518243909, 0.00020864084945060313, 4.0859787986846641e-05, 0.00022181835083756596, 0.00019428873201832175, 5.0723141612252221e-05, 0.00024832837516441941, 0.00016315808170475066, 0.00018161239859182388, 0.00015486938355024904, 0.00016042464994825423, 8.5974570538382977e-05, 0.00028398839640431106, 9.1696943854913116e-05, 0.00014004635158926249, 0.00016626117576379329, 7.1778136771172285e-05, 0.0001552612375235185, 0.00023702491307631135, 0.00017954935901798308, 0.00039514724630862474, 0.00035428500268608332, 0.00020199520804453641, 0.0002069437614409253, 0.00027275332831777632, 0.00032967145671136677, 0.00021212866704445332, 0.00022471537522505969, 0.00018277723575010896, 0.00018040563736576587, 5.3547573770629242e-05, 0.00026079858071170747, 0.00018004505545832217, 0.00017503857088740915, 0.0001879954943433404, 0.00016251068154815584, 0.00029667597846128047, 0.00017013247997965664, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -6,127,-41,-80,-15,96,-22,68, 
  /* [1][0][][] */ 36,-70,30,-127,-64,83,-81,-41, 
  /* [2][0][][] */ -42,96,127,44,107,3,61,36, 
  /* [3][0][][] */ 67,61,-34,33,-26,-69,-127,-2, 
  /* [4][0][][] */ -36,27,16,-47,9,78,127,41, 
  /* [5][0][][] */ 26,86,-127,-36,36,98,12,-33, 
  /* [6][0][][] */ 4,127,61,79,34,-7,30,-51, 
  /* [7][0][][] */ 56,-56,-1,42,31,45,127,9, 
  /* [8][0][][] */ 34,127,66,65,103,77,63,-82, 
  /* [9][0][][] */ 22,127,-58,-53,-8,95,-8,35, 
  /* [10][0][][] */ -45,-44,5,-2,15,-65,-37,127, 
  /* [11][0][][] */ 52,-93,-127,17,1,-13,38,-44, 
  /* [12][0][][] */ 24,-123,-127,-9,-99,30,-1,-1, 
  /* [13][0][][] */ -10,16,-105,127,-101,-59,-15,-15, 
  /* [14][0][][] */ -69,-53,-127,-7,60,-10,-3,-55, 
  /* [15][0][][] */ 14,-43,-127,21,-103,-24,-23,-26, 
  /* [16][0][][] */ 127,-80,-12,51,-71,11,27,83, 
  /* [17][0][][] */ -29,100,127,-25,-56,-9,-24,-23, 
  /* [18][0][][] */ -4,-127,40,78,24,-39,54,-84, 
  /* [19][0][][] */ 127,-47,-57,48,-97,-4,28,104, 
  /* [20][0][][] */ -24,-127,89,80,-20,-72,3,-104, 
  /* [21][0][][] */ 9,-127,-116,-61,100,-43,117,15, 
  /* [22][0][][] */ -110,29,-97,61,40,50,-74,-127, 
  /* [23][0][][] */ -72,-66,53,-37,-58,127,125,-68, 
  /* [24][0][][] */ -52,44,-10,-95,31,127,90,-45, 
  /* [25][0][][] */ -79,-58,-127,-69,-32,-12,-19,-6, 
  /* [26][0][][] */ -10,107,5,127,-126,44,-87,17, 
  /* [27][0][][] */ 46,-125,60,125,6,-69,-18,-127, 
  /* [28][0][][] */ 10,127,32,30,79,42,-25,-25, 
  /* [29][0][][] */ 96,17,-26,-4,24,-116,-127,22, 
  /* [30][0][][] */ 28,-13,19,-127,-2,21,17,4, 
  /* [31][0][][] */ 61,-41,3,74,-14,15,18,127, 
  /* [32][0][][] */ -124,-21,55,-38,-61,127,89,120, 
  /* [33][0][][] */ -27,64,33,-16,36,102,-127,36, 
  /* [34][0][][] */ 72,127,-57,10,74,0,-70,35, 
  /* [35][0][][] */ -16,-127,34,29,1,-38,45,-43, 
  /* [36][0][][] */ 18,-46,-127,25,-120,-98,13,-4, 
  /* [37][0][][] */ -36,-127,67,63,-30,-77,-12,-38, 
  /* [38][0][][] */ -35,28,66,-43,-127,-106,-59,67, 
  /* [39][0][][] */ 27,-127,52,53,-48,-17,-18,-60, 
  /* [40][0][][] */ -36,56,27,62,-127,-4,-54,48, 
  /* [41][0][][] */ 93,127,-76,-100,44,31,-3,17, 
  /* [42][0][][] */ 13,-27,-39,13,127,16,48,22, 
  /* [43][0][][] */ 127,16,62,13,-68,-30,79,89, 
  /* [44][0][][] */ 68,23,-49,16,127,-120,-124,5, 
  /* [45][0][][] */ 41,12,55,23,56,-127,-8,-41, 
  /* [46][0][][] */ 73,-42,-33,127,29,86,6,89, 
  /* [47][0][][] */ -55,-90,68,73,-26,12,127,-52, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0027727107517421246, 0.0033966256305575371, 0.0011270162649452686, 0.0028073715511709452, 0.0044458662159740925, 0.0039277165196835995, 0.0026448341086506844, 0.0011154331732541323, 0.0033057855907827616, 0.0038059060461819172, 0.0046400846913456917, 0.0032638607081025839, 0.00063918763771653175, 0.0034700019750744104, 0.0030393442139029503, 0.00079348444705829024, 0.0038847099058330059, 0.0025523537769913673, 0.0028410425875335932, 0.00242268992587924, 0.0025095934979617596, 0.00134493806399405, 0.0044425553642213345, 0.0014344556257128716, 0.002190806670114398, 0.0026008966378867626, 0.0011228569783270359, 0.0024288198910653591, 0.003707885043695569, 0.0028087696991860867, 0.0061814622022211552, 0.0055422363802790642, 0.0031598999630659819, 0.0032373124267905951, 0.0042668003588914871, 0.0051571954973042011, 0.003318422008305788, 0.0035153215285390615, 0.0028592648450285196, 0.0028221646789461374, 0.00083766825264319777, 0.0040797870606184006, 0.0028165241237729788, 0.0027382054831832647, 0.0029408962000161409, 0.0025422261096537113, 0.0046410327777266502, 0.002661457285284996, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 8222, 13539, -7706, 5865, -3110, 3291, -12512, -18100, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021160188771318644, 0.00013089831918478012, 0.00014007164281792939, 0.00012978196900803596, 0.00014024449046701193, 0.00010297098197042942, 0.0001775218261172995, 0.00010461109195603058, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -47,-6,26,1,-23,-16,11,3,-49,-3,-69,-53,-22,-59,-5,-28,43,-35,38,52,4,26,-40,12,3,-46,52,-18,-5,-16,14,5,72,26,42,-127,12,-9,-36,-33,1,-10,43,41,32,6,28,7, 
  /* [1][0][][] */ -5,68,70,-30,-1,44,-42,-19,11,27,-23,-92,22,105,-24,59,-22,22,-34,-61,15,-80,-4,12,-62,6,-10,-123,-26,-18,29,-82,40,76,-42,12,127,-51,1,54,-14,51,-82,-27,123,-20,-33,-26, 
  /* [2][0][][] */ -6,-14,-58,4,-14,50,22,2,-6,32,2,30,64,-76,19,-43,23,-58,22,36,-31,55,-5,19,-17,64,-15,-52,13,1,24,-72,-47,-81,50,-21,86,24,-14,-44,13,22,81,28,127,23,26,26, 
  /* [3][0][][] */ -4,8,-78,71,26,-34,-73,-96,5,-13,-41,-9,1,25,36,66,0,12,-38,31,-5,-108,34,-60,-72,-5,127,-16,-38,-4,-65,24,-5,-87,-3,-16,-29,-46,-14,100,-25,-30,12,10,29,4,-44,57, 
  /* [4][0][][] */ -25,-65,-2,-7,35,-33,-20,-3,33,-34,52,-73,3,35,19,20,-4,-28,5,-26,-5,-46,-2,-12,8,-4,35,44,39,31,-10,17,-2,-2,5,-4,-63,100,47,-36,32,-19,-27,-16,-70,25,127,9, 
  /* [5][0][][] */ 65,-22,17,13,9,-31,30,-127,32,-36,-14,101,-90,69,4,-74,-13,-79,6,0,-56,56,-25,-57,-47,66,-42,15,-12,46,-37,-31,29,77,32,-2,-49,-17,-33,-42,11,-47,-77,-15,-44,51,78,33, 
  /* [6][0][][] */ 81,-20,27,-19,-50,-27,-37,26,-53,0,-34,127,-48,-42,-5,75,5,49,33,43,30,-85,-42,5,22,30,-78,15,12,-44,26,38,10,14,-22,-2,0,28,-1,-23,-11,-21,34,74,-5,-35,85,-21, 
  /* [7][0][][] */ -28,-16,-11,70,28,41,15,23,24,15,72,-10,114,127,75,34,32,58,-16,10,14,-15,-79,-37,31,-6,-32,61,34,-38,-23,-19,32,17,40,-113,-60,42,51,68,-25,38,78,126,-66,-33,-114,83, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.008993079885840416, 0.0055631785653531551, 0.005953044630587101, 0.0055157337337732315, 0.0059603909030556679, 0.0043762666173279285, 0.0075446772389113903, 0.004445971455425024, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12467, 4949, 7482, 331, 1125, -4765, -1380, 22855, -2308, 1028, 6184, 60787, 4936, 3615, -45, 13177, -5556, 12797, -840, 11592, 14745, 25, 1932, -5322, 11914, 995, 1293, 13250, 2585, -3178, -7263, 10517, 3108, 3027, 2813, 2386, -8690, 6080, 306, 21117, 1427, -5013, 5324, 403, 1456, -853, 9065, -249, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010798368748510256, 0.00014787144027650356, 0.00013646173465531319, 0.00016840452735777944, 0.00050733820535242558, 0.0001591473410371691, 0.00011100836854893714, 0.00021295234910212457, 0.00013475118612404913, 8.9841356384567916e-05, 7.1274669608101249e-05, 4.3130756239406765e-05, 7.8246033808682114e-05, 7.5517658842727542e-05, 0.00026988043100573123, 0.0001619730464881286, 9.5241375674959272e-05, 0.00048981921281665564, 0.00012162435450591147, 0.00012655100726988167, 8.9584267698228359e-05, 0.00043013846152462065, 0.00013677576498594135, 0.00018909940263256431, 0.00011813150922534987, 0.00025828680372796953, 5.9196776419412345e-05, 0.00010588527948129922, 0.0001607906015124172, 0.00055455684196203947, 0.0002087990433210507, 9.6886957180686295e-05, 0.00015471536607947201, 0.0001541490200906992, 0.00022749074560124427, 6.6308188252151012e-05, 8.0408004578202963e-05, 7.738747081020847e-05, 0.00016741045692469925, 5.5640470236539841e-05, 0.00011600826110225171, 0.00013589610171038657, 7.1219634264707565e-05, 9.2912116087973118e-05, 7.7150572906248271e-05, 0.00026330564287491143, 5.8243851526640356e-05, 0.00019554914615582675, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -127,-60,-50,-29,127,-28,47,-47,-91,-66,-25,-59,120,51,65,-106,51,-21,5,-36,-127,127,5,45,-16,68,47,-77,37,-56,63,-84,-48,-106,27,79,-18,74,84,-127,-117,-17,39,85,55,-105,96,84, -87,-51,-70,108,-90,85,97,-46,-75,22,57,-61,119,49,63,-69,-57,-48,33,-44,-68,60,-9,127,-66,73,61,-127,58,-35,-25,-71,-11,-77,46,120,101,127,93,-123,-127,-70,53,49,75,127,108,47, -49,-127,-112,88,-47,-20,42,-13,79,39,43,-17,14,69,-33,1,-79,5,39,-32,-112,22,-55,-36,-68,31,22,-113,19,72,119,-72,21,5,-34,82,38,34,57,-48,-13,127,66,14,54,22,47,-116, 
  /* [0][1][][] */ -96,-108,-49,-127,-85,-32,94,-77,-127,-127,122,-49,83,78,-127,-120,127,-127,-56,-99,-104,84,-94,6,-3,57,114,-29,-105,-63,14,-35,-46,-93,-127,63,32,91,13,-50,24,-14,89,127,64,113,127,-127, -77,-80,-127,-86,-9,127,127,-127,103,44,127,-127,127,127,57,-77,66,-107,-127,-112,-66,26,-127,94,-127,127,95,-72,-127,127,-46,-127,-127,-102,33,127,127,95,-23,-86,69,-106,127,110,127,1,101,124, -101,-105,-70,123,71,-42,69,-42,89,17,13,-54,10,50,58,-7,8,-6,-15,-83,-62,36,-52,-72,-90,57,60,-98,-70,45,127,-85,-35,-36,54,91,73,46,-23,-72,35,120,64,-6,63,-63,56,31, 
  /* [0][2][][] */ -61,13,-29,6,-56,-12,48,-13,24,-33,24,-48,-3,30,-16,-69,-71,-10,84,-111,-72,73,-90,-20,-11,64,104,7,38,47,-7,-14,6,-127,-41,86,28,78,-64,-32,1,36,26,61,17,52,22,-102, -18,-39,-73,-86,94,52,35,-29,116,32,-14,-64,19,24,-122,-127,50,-2,45,-127,-94,71,-110,91,-33,88,127,-59,28,6,-50,5,-48,-9,-63,58,20,23,-127,-94,-8,-35,58,68,19,-99,48,-5, 53,-21,-39,-6,-24,-1,-6,-23,-71,4,10,-3,-38,-6,2,-35,51,19,-15,-90,-57,12,24,-46,-32,-3,79,-20,14,-62,5,-14,-58,8,12,76,9,24,-86,-33,-18,95,37,48,36,-13,34,45, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0045893066562712193, 0.0062845363281667233, 0.0057996236719191074, 0.0071571925655007362, 0.021561872214078903, 0.0067637618631124496, 0.0047178557142615318, 0.009050474502146244, 0.0057269255630671978, 0.003818257711827755, 0.0030291734728962183, 0.0018330571474507451, 0.0033254565205425024, 0.003209500340744853, 0.011469918303191662, 0.0068838540464639664, 0.004047758411616087, 0.020817315205931664, 0.0051690349355340004, 0.0053784176707267761, 0.0038073312025517225, 0.018280884250998497, 0.0058129699900746346, 0.008036724291741848, 0.0050205891020596027, 0.010977189056575298, 0.0025158629287034273, 0.0045001241378486156, 0.0068336003459990025, 0.023568665608763695, 0.0088739590719342232, 0.004117695614695549, 0.0065754028037190437, 0.006551333237439394, 0.0096683567389845848, 0.0028180980589240789, 0.0034173401072621346, 0.0032889675348997116, 0.007114944513887167, 0.0023647199850529432, 0.0049303509294986725, 0.0057755839079618454, 0.0030268344562500715, 0.0039487648755311966, 0.0032788992393761873, 0.011190489865839481, 0.0024753636680543423, 0.0083108386024832726, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 887, -719, -212, 1230, 7323, 1998, -434, 7704, 780, 2071, 83, 2964, 830, 578, -320, 1121, 4329, 14457, 1963, -594, 930, -1147, -523, 2437, -86, -923, 1221, -96, 2107, 8891, 3336, -140, 567, -305, 3974, -259, 123, -467, 1494, 891, 1135, 1995, -1, -286, 267, 2209, 1283, 16, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00052916147978976369, 0.00034923781640827656, 0.00038617092650383711, 0.00037084665382280946, 0.0001225094310939312, 0.00037652687751688063, 0.00059244927251711488, 0.00013894886069465429, 0.00050647376338019967, 0.00037516377051360905, 0.00047268017078749835, 0.00027982381288893521, 0.00027032804791815579, 0.00046450423542410135, 0.00043287075823172927, 0.00025366051704622805, 0.00018644474039319903, 7.1027192461770028e-05, 0.00034330497146584094, 0.00034259396488778293, 0.00048464885912835598, 0.00021069830108899623, 0.00039292676956392825, 0.00030237084138207138, 0.00053542893147096038, 0.00071889685932546854, 0.00037707239971496165, 0.00067439005943015218, 0.00036909093614667654, 0.00010325518087483943, 0.00022624411212746054, 0.00072945590363815427, 0.00043452216777950525, 0.00032117319642566144, 0.00021841739362571388, 0.00040564712253399193, 0.00050826458027586341, 0.00065823126351460814, 0.00040397138218395412, 0.00054206280037760735, 0.00034634466283023357, 0.00036827664007432759, 0.0005084106232970953, 0.0004904453526251018, 0.00052718346705660224, 0.00023900781525298953, 0.00026346472441218793, 0.00049159122863784432, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -13,34,9,-45,-82,-84,-127,14, 
  /* [1][0][][] */ 100,-98,-67,-43,127,-92,79,13, 
  /* [2][0][][] */ -81,118,-37,-127,61,-55,-33,25, 
  /* [3][0][][] */ 36,-7,55,-27,110,83,127,-42, 
  /* [4][0][][] */ 0,-127,81,34,-47,-84,33,-26, 
  /* [5][0][][] */ 127,-21,68,51,-58,-6,-15,-8, 
  /* [6][0][][] */ 36,40,127,-34,61,-37,-48,11, 
  /* [7][0][][] */ 20,2,-114,-31,-38,101,127,-58, 
  /* [8][0][][] */ 2,44,0,26,65,127,36,47, 
  /* [9][0][][] */ 20,127,-65,115,99,-126,112,52, 
  /* [10][0][][] */ 30,-127,-2,-45,-55,-101,-38,-73, 
  /* [11][0][][] */ -127,-106,90,65,-44,-71,109,81, 
  /* [12][0][][] */ -38,38,-127,67,21,-59,-64,71, 
  /* [13][0][][] */ 102,-127,97,65,11,12,63,-65, 
  /* [14][0][][] */ -37,59,-19,-127,-1,-99,3,-32, 
  /* [15][0][][] */ 46,118,18,-16,37,-81,101,-127, 
  /* [16][0][][] */ -127,-102,-62,109,-15,40,-81,123, 
  /* [17][0][][] */ -9,-89,-127,54,-42,73,-53,90, 
  /* [18][0][][] */ -54,-56,-50,59,5,51,2,127, 
  /* [19][0][][] */ 56,-126,105,-127,-8,-85,46,-47, 
  /* [20][0][][] */ 21,71,45,13,30,127,36,14, 
  /* [21][0][][] */ 36,127,57,-32,46,-62,61,-120, 
  /* [22][0][][] */ 56,5,95,46,-28,127,13,-16, 
  /* [23][0][][] */ -107,-73,23,-34,87,98,-111,-127, 
  /* [24][0][][] */ -82,-64,37,-89,82,51,-14,-127, 
  /* [25][0][][] */ 127,21,-46,-24,23,30,-37,-20, 
  /* [26][0][][] */ -113,-28,-127,-34,-44,-36,21,0, 
  /* [27][0][][] */ 81,49,-10,-76,-127,-30,103,95, 
  /* [28][0][][] */ -103,-39,15,59,-51,-127,1,-41, 
  /* [29][0][][] */ 127,59,54,-81,46,9,-36,-89, 
  /* [30][0][][] */ -88,-104,41,-56,20,127,-76,-118, 
  /* [31][0][][] */ 57,39,4,127,-1,-72,12,4, 
  /* [32][0][][] */ -44,127,-12,2,50,76,-2,56, 
  /* [33][0][][] */ -67,117,-127,-19,20,-67,-25,-14, 
  /* [34][0][][] */ -127,-87,-52,120,7,6,-14,118, 
  /* [35][0][][] */ -55,127,-22,2,75,101,48,64, 
  /* [36][0][][] */ 68,32,-22,-32,-127,-51,93,122, 
  /* [37][0][][] */ -55,103,27,-4,-127,86,-25,-113, 
  /* [38][0][][] */ 19,16,-31,13,123,68,127,81, 
  /* [39][0][][] */ -7,-77,34,-15,14,43,-127,113, 
  /* [40][0][][] */ -127,0,-95,117,-42,3,5,61, 
  /* [41][0][][] */ 127,-4,17,85,-52,-17,15,-26, 
  /* [42][0][][] */ -34,1,-65,-127,57,-92,8,57, 
  /* [43][0][][] */ 27,-1,103,-4,35,127,77,1, 
  /* [44][0][][] */ -20,-13,-63,127,52,2,-51,-33, 
  /* [45][0][][] */ 127,114,95,-60,61,-66,32,-105, 
  /* [46][0][][] */ -32,-127,-23,42,-19,51,-92,118, 
  /* [47][0][][] */ 32,15,86,-13,69,81,127,-47, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0050263316370546818, 0.0033172955736517906, 0.0036681110505014658, 0.0035225506871938705, 0.0011636768467724323, 0.0035765054635703564, 0.0056274812668561935, 0.0013198297237977386, 0.0048108282499015331, 0.0035635577514767647, 0.0044898339547216892, 0.0026579545810818672, 0.0025677576195448637, 0.004412173293530941, 0.004111697431653738, 0.0024094381369650364, 0.0017709775129333138, 0.00067466404289007187, 0.003260941244661808, 0.0032541877590119839, 0.0046035205014050007, 0.0020013540051877499, 0.0037322824355214834, 0.0028721215203404427, 0.0050858641043305397, 0.0068285656161606312, 0.0035816871095448732, 0.0064058098942041397, 0.0035058737266808748, 0.00098078709561377764, 0.0021490186918526888, 0.0069288625381886959, 0.0041273836977779865, 0.0030507189221680164, 0.0020746751688420773, 0.0038531089667230844, 0.0048278383910655975, 0.0062523228116333485, 0.0038371917326003313, 0.0051488769240677357, 0.0032898143399506807, 0.0034981390926986933, 0.0048292260617017746, 0.0046585798263549805, 0.0050075431354343891, 0.0022702568676322699, 0.0025025650393217802, 0.0046694637276232243, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -4121, 1883, 13304, -11229, 23312, 6958, -7385, 10400, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017234444385394454, 0.00021152630506549031, 0.00014206202467903495, 0.00020469815353862941, 0.00018481661390978843, 0.0001941684604389593, 0.0001573774206917733, 0.00019769117352552712, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -15,-20,-33,-105,-33,-52,1,-21,31,9,-49,-4,119,127,-32,-94, 
  /* [1][0][][] */ 127,-75,-46,7,-48,75,-79,-42,-45,80,-44,-75,-27,13,-68,-14, 
  /* [2][0][][] */ -46,-109,56,63,53,-75,-103,-12,56,-117,23,-127,67,-14,-75,20, 
  /* [3][0][][] */ 37,20,15,18,-12,90,-52,-28,127,54,22,18,5,-16,19,21, 
  /* [4][0][][] */ -99,-43,-22,-127,-26,48,38,-112,54,-35,-40,-15,-124,46,-46,-30, 
  /* [5][0][][] */ 78,52,70,-33,36,-34,-127,-102,-13,-75,70,37,-50,31,49,-45, 
  /* [6][0][][] */ 89,50,-111,-74,19,-59,0,-89,-52,36,-127,91,78,-94,22,80, 
  /* [7][0][][] */ -127,17,112,-27,-56,9,8,-61,-55,73,84,-35,55,-28,50,35, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0073246387764811516, 0.0089898677542805672, 0.0060376357287168503, 0.0086996713653206825, 0.0078547056764364243, 0.0082521596923470497, 0.0066885403357446194, 0.008401874452829361, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 24098, 953, -660, 2842, -2279, 868, 7477, 2442, 214, 644, -818, 7092, 1055, -816, 83, -473, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 8.8216467702295631e-05, 0.00022299248666968197, 0.00018718808132689446, 0.00020255356503184885, 0.00083827151684090495, 0.00064468715572729707, 0.00021073766401968896, 0.00057416287017986178, 0.00029376984457485378, 0.0009705396369099617, 0.00024317781208083034, 0.00016638156375847757, 0.00010833258420461789, 0.00013965195103082806, 0.00023568763572257012, 0.00064070028020069003, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 6,-10,43,21,-15,9,0,17,-12,-12,-7,-45,-8,-3,-10,-5, 10,-21,40,24,16,-3,4,-25,-20,8,-22,77,-4,29,4,-5, 9,1,13,18,7,-15,-13,10,9,0,0,-25,-2,-2,-4,-6, 
  /* [0][1][][] */ -6,-24,-7,-2,127,-26,-127,-22,127,127,-2,-34,123,-20,-6,-25, -127,127,127,-4,-84,-93,-10,-103,6,-106,127,127,127,127,127,127, 15,-4,-15,5,-5,127,-1,-13,6,-13,-8,-24,5,-3,-24,-18, 
  /* [0][2][][] */ 5,-6,7,-20,-13,13,53,6,-3,-8,-11,-19,-16,2,-3,-15, 20,-21,-19,-127,9,-18,-6,127,-10,0,-8,-38,-18,-57,-26,-40, -4,-15,-9,3,7,-5,9,-3,2,1,-13,-31,-4,-8,-18,-19, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0037491996772587299, 0.0094771804288029671, 0.0079554934054613113, 0.0086085265502333641, 0.035626538097858429, 0.027399202808737755, 0.0089563503861427307, 0.024401921778917313, 0.012485218234360218, 0.041247934103012085, 0.01033505704253912, 0.0070712161250412464, 0.0046041347086429596, 0.0059352079406380653, 0.010016724467277527, 0.027229761704802513, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1711, 881, -562, 3275, 59057, 36301, 6096, 19800, 4908, 3595, 1422, -130, 6418, -13446, 1264, 26775, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00021487276535481215, 0.00076839019311591983, 0.0003206813707947731, 0.0001768104120856151, 2.4880095224943943e-05, 4.1998588130809367e-05, 0.00013632180343847722, 3.5562425182433799e-05, 0.00014480070967692882, 4.5612676331074908e-05, 0.00052669842261821032, 0.00069736549630761147, 0.00028520377236418426, 1.6964997485047206e-05, 0.00050837872549891472, 5.7026485592359677e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 33, 127, 20, 
  /* [1][0][][] */ 104, -95, -11, 
  /* [1][1][][] */ -127, 102, 23, 
  /* [1][2][][] */ 12, -3, -13, 
  /* [2][0][][] */ -23, -2, -46, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -93, -78, 
  /* [3][0][][] */ 116, 121, 55, 
  /* [3][1][][] */ -1, -23, -16, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 47, -40, -11, 
  /* [4][1][][] */ 22, -127, -4, 
  /* [4][2][][] */ 9, -81, -8, 
  /* [5][0][][] */ -55, 52, -19, 
  /* [5][1][][] */ -127, 76, 1, 
  /* [5][2][][] */ -123, 42, -13, 
  /* [6][0][][] */ -17, 81, 127, 
  /* [6][1][][] */ -54, 54, -20, 
  /* [6][2][][] */ -39, -56, -93, 
  /* [7][0][][] */ 21, -6, -13, 
  /* [7][1][][] */ 127, 48, 13, 
  /* [7][2][][] */ 3, -24, -34, 
  /* [8][0][][] */ -19, -29, 54, 
  /* [8][1][][] */ -52, -85, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -36, 48, -5, 
  /* [9][1][][] */ -28, 127, -15, 
  /* [9][2][][] */ -12, 77, -7, 
  /* [10][0][][] */ 24, 87, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 11, 39, 17, 
  /* [11][0][][] */ 8, -18, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -42, 48, -11, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -78, 78, 4, 
  /* [13][0][][] */ 78, 46, 4, 
  /* [13][1][][] */ 70, 127, 29, 
  /* [13][2][][] */ 50, 127, 65, 
  /* [14][0][][] */ -29, -28, 46, 
  /* [14][1][][] */ 44, 96, -127, 
  /* [14][2][][] */ -17, -71, 79, 
  /* [15][0][][] */ -55, -1, 31, 
  /* [15][1][][] */ -127, -96, 43, 
  /* [15][2][][] */ -48, -51, 7, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.054792553186416626, 0.19593948125839233, 0.081773743033409119, 0.045086652040481567, 0.006344424095004797, 0.010709639638662338, 0.034762058407068253, 0.0090684182941913605, 0.036924179643392563, 0.011631231755018234, 0.13430808484554291, 0.17782819271087646, 0.072726957499980927, 0.0043260739184916019, 0.12963657081127167, 0.014541752636432648, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10527787357568741, } };
const TfArray<1, int> quant46_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.063924558460712433, } };
const TfArray<1, int> quant50_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.05055643618106842, } };
const TfArray<1, int> quant53_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.080315984785556793, } };
const TfArray<1, int> quant54_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.05933636799454689, } };
const TfArray<1, int> quant58_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.022875562310218811, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.050855632871389389, } };
const TfArray<1, int> quant61_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.066459983587265015, } };
const TfArray<1, int> quant62_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.02079671248793602, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.042409244924783707, } };
const TfArray<1, int> quant65_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.076605759561061859, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.020242342725396156, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.042194865643978119, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.14511951804161072, } };
const TfArray<1, int> quant69_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
